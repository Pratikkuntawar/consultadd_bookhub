{"version":3,"sources":["node_modules/@angular/animations/fesm2022/animations.mjs","node_modules/ngx-toastr/fesm2022/ngx-toastr.mjs"],"sourcesContent":["/**\n * @license Angular v20.1.0\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, Injectable, ANIMATION_MODULE_TYPE, ɵRuntimeError as _RuntimeError, Inject, ViewEncapsulation } from '@angular/core';\nimport { sequence } from './private_export.mjs';\nexport { AUTO_STYLE, AnimationMetadataType, NoopAnimationPlayer, animate, animateChild, animation, group, keyframes, query, stagger, state, style, transition, trigger, useAnimation, AnimationGroupPlayer as ɵAnimationGroupPlayer, ɵPRE_STYLE } from './private_export.mjs';\n\n/**\n * An injectable service that produces an animation sequence programmatically within an\n * Angular component or directive.\n * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.\n *\n * @usageNotes\n *\n * To use this service, add it to your component or directive as a dependency.\n * The service is instantiated along with your component.\n *\n * Apps do not typically need to create their own animation players, but if you\n * do need to, follow these steps:\n *\n * 1. Use the <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code> method\n * to create a programmatic animation. The method returns an `AnimationFactory` instance.\n *\n * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.\n *\n * 3. Use the player object to control the animation programmatically.\n *\n * For example:\n *\n * ```ts\n * // import the service from BrowserAnimationsModule\n * import {AnimationBuilder} from '@angular/animations';\n * // require the service as a dependency\n * class MyCmp {\n *   constructor(private _builder: AnimationBuilder) {}\n *\n *   makeAnimation(element: any) {\n *     // first define a reusable animation\n *     const myAnimation = this._builder.build([\n *       style({ width: 0 }),\n *       animate(1000, style({ width: '100px' }))\n *     ]);\n *\n *     // use the returned factory object to create a player\n *     const player = myAnimation.create(element);\n *\n *     player.play();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass AnimationBuilder {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: AnimationBuilder, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: AnimationBuilder, providedIn: 'root', useFactory: () => inject(BrowserAnimationBuilder) });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: AnimationBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root', useFactory: () => inject(BrowserAnimationBuilder) }]\n        }] });\n/**\n * A factory object returned from the\n * <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code>\n * method.\n *\n * @publicApi\n */\nclass AnimationFactory {\n}\nclass BrowserAnimationBuilder extends AnimationBuilder {\n    animationModuleType = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _nextAnimationId = 0;\n    _renderer;\n    constructor(rootRenderer, doc) {\n        super();\n        const typeData = {\n            id: '0',\n            encapsulation: ViewEncapsulation.None,\n            styles: [],\n            data: { animation: [] },\n        };\n        this._renderer = rootRenderer.createRenderer(doc.body, typeData);\n        if (this.animationModuleType === null && !isAnimationRenderer(this._renderer)) {\n            // We only support AnimationRenderer & DynamicDelegationRenderer for this AnimationBuilder\n            throw new _RuntimeError(3600 /* RuntimeErrorCode.BROWSER_ANIMATION_BUILDER_INJECTED_WITHOUT_ANIMATIONS */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'Angular detected that the `AnimationBuilder` was injected, but animation support was not enabled. ' +\n                    'Please make sure that you enable animations in your application by calling `provideAnimations()` or `provideAnimationsAsync()` function.');\n        }\n    }\n    build(animation) {\n        const id = this._nextAnimationId;\n        this._nextAnimationId++;\n        const entry = Array.isArray(animation) ? sequence(animation) : animation;\n        issueAnimationCommand(this._renderer, null, id, 'register', [entry]);\n        return new BrowserAnimationFactory(id, this._renderer);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: BrowserAnimationBuilder, deps: [{ token: i0.RendererFactory2 }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: BrowserAnimationBuilder, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: BrowserAnimationBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.RendererFactory2 }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\nclass BrowserAnimationFactory extends AnimationFactory {\n    _id;\n    _renderer;\n    constructor(_id, _renderer) {\n        super();\n        this._id = _id;\n        this._renderer = _renderer;\n    }\n    create(element, options) {\n        return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);\n    }\n}\nclass RendererAnimationPlayer {\n    id;\n    element;\n    _renderer;\n    parentPlayer = null;\n    _started = false;\n    constructor(id, element, options, _renderer) {\n        this.id = id;\n        this.element = element;\n        this._renderer = _renderer;\n        this._command('create', options);\n    }\n    _listen(eventName, callback) {\n        return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);\n    }\n    _command(command, ...args) {\n        issueAnimationCommand(this._renderer, this.element, this.id, command, args);\n    }\n    onDone(fn) {\n        this._listen('done', fn);\n    }\n    onStart(fn) {\n        this._listen('start', fn);\n    }\n    onDestroy(fn) {\n        this._listen('destroy', fn);\n    }\n    init() {\n        this._command('init');\n    }\n    hasStarted() {\n        return this._started;\n    }\n    play() {\n        this._command('play');\n        this._started = true;\n    }\n    pause() {\n        this._command('pause');\n    }\n    restart() {\n        this._command('restart');\n    }\n    finish() {\n        this._command('finish');\n    }\n    destroy() {\n        this._command('destroy');\n    }\n    reset() {\n        this._command('reset');\n        this._started = false;\n    }\n    setPosition(p) {\n        this._command('setPosition', p);\n    }\n    getPosition() {\n        return unwrapAnimationRenderer(this._renderer)?.engine?.players[this.id]?.getPosition() ?? 0;\n    }\n    totalTime = 0;\n}\nfunction issueAnimationCommand(renderer, element, id, command, args) {\n    renderer.setProperty(element, `@@${id}:${command}`, args);\n}\n/**\n * The following 2 methods cannot reference their correct types (AnimationRenderer &\n * DynamicDelegationRenderer) since this would introduce a import cycle.\n */\nfunction unwrapAnimationRenderer(renderer) {\n    const type = renderer.ɵtype;\n    if (type === 0 /* AnimationRendererType.Regular */) {\n        return renderer;\n    }\n    else if (type === 1 /* AnimationRendererType.Delegated */) {\n        return renderer.animationRenderer;\n    }\n    return null;\n}\nfunction isAnimationRenderer(renderer) {\n    const type = renderer.ɵtype;\n    return type === 0 /* AnimationRendererType.Regular */ || type === 1 /* AnimationRendererType.Delegated */;\n}\n\nexport { AnimationBuilder, AnimationFactory, sequence, BrowserAnimationBuilder as ɵBrowserAnimationBuilder };\n\n","import * as i0 from '@angular/core';\nimport { Directive, InjectionToken, inject, Injectable, ComponentFactoryResolver, ApplicationRef, SecurityContext, Injector, Inject, signal, Component, ChangeDetectionStrategy, HostBinding, HostListener, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { DOCUMENT, NgIf } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/platform-browser';\n\nclass ToastContainerDirective {\n    el;\n    constructor(el) {\n        this.el = el;\n    }\n    getContainerElement() {\n        return this.el.nativeElement;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastContainerDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.0.0\", type: ToastContainerDirective, isStandalone: true, selector: \"[toastContainer]\", exportAs: [\"toastContainer\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastContainerDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[toastContainer]',\n                    exportAs: 'toastContainer',\n                    standalone: true\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }] });\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal {\n    _attachedHost;\n    /** The type of the component that will be instantiated for attachment. */\n    component;\n    /**\n     * [Optional] Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalHost.\n     * The origin necessary when the host is outside of the Angular application context.\n     */\n    viewContainerRef;\n    /** Injector used for the instantiation of the component. */\n    injector;\n    constructor(component, injector) {\n        this.component = component;\n        this.injector = injector;\n    }\n    /** Attach this portal to a host. */\n    attach(host, newestOnTop) {\n        this._attachedHost = host;\n        return host.attach(this, newestOnTop);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        const host = this._attachedHost;\n        if (host) {\n            this._attachedHost = undefined;\n            return host.detach();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nclass BasePortalHost {\n    /** The portal currently attached to the host. */\n    _attachedPortal;\n    /** A function that will permanently dispose this host. */\n    _disposeFn;\n    attach(portal, newestOnTop) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal, newestOnTop);\n    }\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost();\n        }\n        this._attachedPortal = undefined;\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = undefined;\n        }\n    }\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n}\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nclass ToastRef {\n    _overlayRef;\n    /** The instance of component opened into the toast. */\n    componentInstance;\n    /** Count of duplicates of this toast */\n    duplicatesCount = 0;\n    /** Subject for notifying the user that the toast has finished closing. */\n    _afterClosed = new Subject();\n    /** triggered when toast is activated */\n    _activate = new Subject();\n    /** notifies the toast that it should close before the timeout */\n    _manualClose = new Subject();\n    /** notifies the toast that it should reset the timeouts */\n    _resetTimeout = new Subject();\n    /** notifies the toast that it should count a duplicate toast */\n    _countDuplicate = new Subject();\n    constructor(_overlayRef) {\n        this._overlayRef = _overlayRef;\n    }\n    manualClose() {\n        this._manualClose.next();\n        this._manualClose.complete();\n    }\n    manualClosed() {\n        return this._manualClose.asObservable();\n    }\n    timeoutReset() {\n        return this._resetTimeout.asObservable();\n    }\n    countDuplicate() {\n        return this._countDuplicate.asObservable();\n    }\n    /**\n     * Close the toast.\n     */\n    close() {\n        this._overlayRef.detach();\n        this._afterClosed.next();\n        this._manualClose.next();\n        this._afterClosed.complete();\n        this._manualClose.complete();\n        this._activate.complete();\n        this._resetTimeout.complete();\n        this._countDuplicate.complete();\n    }\n    /** Gets an observable that is notified when the toast is finished closing. */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    isInactive() {\n        return this._activate.isStopped;\n    }\n    activate() {\n        this._activate.next();\n        this._activate.complete();\n    }\n    /** Gets an observable that is notified when the toast has started opening. */\n    afterActivate() {\n        return this._activate.asObservable();\n    }\n    /** Reset the toast timouts and count duplicates */\n    onDuplicate(resetTimeout, countDuplicate) {\n        if (resetTimeout) {\n            this._resetTimeout.next();\n        }\n        if (countDuplicate) {\n            this._countDuplicate.next(++this.duplicatesCount);\n        }\n    }\n}\n\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n    toastId;\n    config;\n    message;\n    title;\n    toastType;\n    toastRef;\n    _onTap = new Subject();\n    _onAction = new Subject();\n    constructor(toastId, config, message, title, toastType, toastRef) {\n        this.toastId = toastId;\n        this.config = config;\n        this.message = message;\n        this.title = title;\n        this.toastType = toastType;\n        this.toastRef = toastRef;\n        this.toastRef.afterClosed().subscribe(() => {\n            this._onAction.complete();\n            this._onTap.complete();\n        });\n    }\n    /** Fired on click */\n    triggerTap() {\n        this._onTap.next();\n        if (this.config.tapToDismiss) {\n            this._onTap.complete();\n        }\n    }\n    onTap() {\n        return this._onTap.asObservable();\n    }\n    /** available for use in custom toast */\n    triggerAction(action) {\n        this._onAction.next(action);\n    }\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\nconst DefaultNoComponentGlobalConfig = {\n    maxOpened: 0,\n    autoDismiss: false,\n    newestOnTop: true,\n    preventDuplicates: false,\n    countDuplicates: false,\n    resetTimeoutOnDuplicate: false,\n    includeTitleDuplicates: false,\n    iconClasses: {\n        error: 'toast-error',\n        info: 'toast-info',\n        success: 'toast-success',\n        warning: 'toast-warning',\n    },\n    // Individual\n    closeButton: false,\n    disableTimeOut: false,\n    timeOut: 5000,\n    extendedTimeOut: 1000,\n    enableHtml: false,\n    progressBar: false,\n    toastClass: 'ngx-toastr',\n    positionClass: 'toast-top-right',\n    titleClass: 'toast-title',\n    messageClass: 'toast-message',\n    easing: 'ease-in',\n    easeTime: 300,\n    tapToDismiss: true,\n    onActivateTick: false,\n    progressAnimation: 'decreasing',\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n    _hostDomElement;\n    _componentFactoryResolver;\n    _appRef;\n    constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n        super();\n        this._hostDomElement = _hostDomElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     */\n    attachComponentPortal(portal, newestOnTop) {\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the ChangeDetector for that component to the application (which\n        // happens automatically when using a ViewContainer).\n        componentRef = componentFactory.create(portal.injector);\n        // When creating a component outside of a ViewContainer, we need to manually register\n        // its ChangeDetector with the application. This API is unfortunately not yet published\n        // in Angular core. The change detector must also be deregistered when the component\n        // is destroyed to prevent memory leaks.\n        this._appRef.attachView(componentRef.hostView);\n        this.setDisposeFn(() => {\n            this._appRef.detachView(componentRef.hostView);\n            componentRef.destroy();\n        });\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        if (newestOnTop) {\n            this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n        }\n        else {\n            this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        }\n        return componentRef;\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n\n/** Container inside which all toasts will render. */\nclass OverlayContainer {\n    _document = inject(DOCUMENT);\n    _containerElement;\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body\n     * and 'aria-live=\"polite\"'\n     */\n    _createContainer() {\n        const container = this._document.createElement('div');\n        container.classList.add('overlay-container');\n        container.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: OverlayContainer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    _portalHost;\n    constructor(_portalHost) {\n        this._portalHost = _portalHost;\n    }\n    attach(portal, newestOnTop = true) {\n        return this._portalHost.attach(portal, newestOnTop);\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns Resolves when the overlay has been detached.\n     */\n    detach() {\n        return this._portalHost.detach();\n    }\n}\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    _overlayContainer = inject(OverlayContainer);\n    _componentFactoryResolver = inject(ComponentFactoryResolver);\n    _appRef = inject(ApplicationRef);\n    _document = inject(DOCUMENT);\n    // Namespace panes by overlay container\n    _paneElements = new Map();\n    /**\n     * Creates an overlay.\n     * @returns A reference to the created overlay.\n     */\n    create(positionClass, overlayContainer) {\n        // get existing pane if possible\n        return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n    }\n    getPaneElement(positionClass = '', overlayContainer) {\n        if (!this._paneElements.get(overlayContainer)) {\n            this._paneElements.set(overlayContainer, {});\n        }\n        if (!this._paneElements.get(overlayContainer)[positionClass]) {\n            this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n        }\n        return this._paneElements.get(overlayContainer)[positionClass];\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(positionClass, overlayContainer) {\n        const pane = this._document.createElement('div');\n        pane.id = 'toast-container';\n        pane.classList.add(positionClass);\n        pane.classList.add('toast-container');\n        if (!overlayContainer) {\n            this._overlayContainer.getContainerElement().appendChild(pane);\n        }\n        else {\n            overlayContainer.getContainerElement().appendChild(pane);\n        }\n        return pane;\n    }\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal host.\n     * @returns A portal host for the given DOM element.\n     */\n    _createPortalHost(pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n    }\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param pane DOM element for the overlay\n     */\n    _createOverlayRef(pane) {\n        return new OverlayRef(this._createPortalHost(pane));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Overlay, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Overlay, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass ToastrService {\n    overlay;\n    _injector;\n    sanitizer;\n    ngZone;\n    toastrConfig;\n    currentlyActive = 0;\n    toasts = [];\n    overlayContainer;\n    previousToastMessage;\n    index = 0;\n    constructor(token, overlay, _injector, sanitizer, ngZone) {\n        this.overlay = overlay;\n        this._injector = _injector;\n        this.sanitizer = sanitizer;\n        this.ngZone = ngZone;\n        this.toastrConfig = {\n            ...token.default,\n            ...token.config,\n        };\n        if (token.config.iconClasses) {\n            this.toastrConfig.iconClasses = {\n                ...token.default.iconClasses,\n                ...token.config.iconClasses,\n            };\n        }\n    }\n    /** show toast */\n    show(message, title, override = {}, type = '') {\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show successful toast */\n    success(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.success || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show error toast */\n    error(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.error || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show info toast */\n    info(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.info || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show warning toast */\n    warning(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.warning || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId) {\n        // Call every toastRef manualClose function\n        for (const toast of this.toasts) {\n            if (toastId !== undefined) {\n                if (toast.toastId === toastId) {\n                    toast.toastRef.manualClose();\n                    return;\n                }\n            }\n            else {\n                toast.toastRef.manualClose();\n            }\n        }\n    }\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId) {\n        const found = this._findToast(toastId);\n        if (!found) {\n            return false;\n        }\n        found.activeToast.toastRef.close();\n        this.toasts.splice(found.index, 1);\n        this.currentlyActive = this.currentlyActive - 1;\n        if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n            return false;\n        }\n        if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n            const p = this.toasts[this.currentlyActive].toastRef;\n            if (!p.isInactive()) {\n                this.currentlyActive = this.currentlyActive + 1;\n                p.activate();\n            }\n        }\n        return true;\n    }\n    /**\n     * Determines if toast message is already shown\n     */\n    findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n        const { includeTitleDuplicates } = this.toastrConfig;\n        for (const toast of this.toasts) {\n            const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n            if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n                toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n                return toast;\n            }\n        }\n        return null;\n    }\n    /** create a clone of global config and apply individual settings */\n    applyConfig(override = {}) {\n        return { ...this.toastrConfig, ...override };\n    }\n    /**\n     * Find toast object by id\n     */\n    _findToast(toastId) {\n        for (let i = 0; i < this.toasts.length; i++) {\n            if (this.toasts[i].toastId === toastId) {\n                return { index: i, activeToast: this.toasts[i] };\n            }\n        }\n        return null;\n    }\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     */\n    _preBuildNotification(toastType, message, title, config) {\n        if (config.onActivateTick) {\n            return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n        }\n        return this._buildNotification(toastType, message, title, config);\n    }\n    /**\n     * Creates and attaches toast data to component\n     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n     */\n    _buildNotification(toastType, message, title, config) {\n        if (!config.toastComponent) {\n            throw new Error('toastComponent required');\n        }\n        // max opened and auto dismiss = true\n        // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n        // a timeout at all\n        const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n        if (((this.toastrConfig.includeTitleDuplicates && title) || message) &&\n            this.toastrConfig.preventDuplicates &&\n            duplicate !== null) {\n            return duplicate;\n        }\n        this.previousToastMessage = message;\n        let keepInactive = false;\n        if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n            keepInactive = true;\n            if (this.toastrConfig.autoDismiss) {\n                this.clear(this.toasts[0].toastId);\n            }\n        }\n        const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n        this.index = this.index + 1;\n        let sanitizedMessage = message;\n        if (message && config.enableHtml) {\n            sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n        }\n        const toastRef = new ToastRef(overlayRef);\n        const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n        /** New injector that contains an instance of `ToastPackage`. */\n        const providers = [{ provide: ToastPackage, useValue: toastPackage }];\n        const toastInjector = Injector.create({ providers, parent: this._injector });\n        const component = new ComponentPortal(config.toastComponent, toastInjector);\n        const portal = overlayRef.attach(component, config.newestOnTop);\n        toastRef.componentInstance = portal.instance;\n        const ins = {\n            toastId: this.index,\n            title: title || '',\n            message: message || '',\n            toastRef,\n            onShown: toastRef.afterActivate(),\n            onHidden: toastRef.afterClosed(),\n            onTap: toastPackage.onTap(),\n            onAction: toastPackage.onAction(),\n            portal,\n        };\n        if (!keepInactive) {\n            this.currentlyActive = this.currentlyActive + 1;\n            setTimeout(() => {\n                ins.toastRef.activate();\n            });\n        }\n        this.toasts.push(ins);\n        return ins;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrService, deps: [{ token: TOAST_CONFIG }, { token: Overlay }, { token: i0.Injector }, { token: i2.DomSanitizer }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [TOAST_CONFIG]\n                }] }, { type: Overlay }, { type: i0.Injector }, { type: i2.DomSanitizer }, { type: i0.NgZone }] });\n\nclass Toast {\n    toastrService;\n    toastPackage;\n    ngZone;\n    message;\n    title;\n    options;\n    duplicatesCount;\n    originalTimeout;\n    /** width of progress bar */\n    width = signal(-1);\n    /** a combination of toast type and options.toastClass */\n    toastClasses = '';\n    state;\n    /** controls animation */\n    get _state() {\n        return this.state();\n    }\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state().value === 'inactive') {\n            return 'none';\n        }\n        return;\n    }\n    timeout;\n    intervalId;\n    hideTime;\n    sub;\n    sub1;\n    sub2;\n    sub3;\n    constructor(toastrService, toastPackage, ngZone) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.ngZone = ngZone;\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n        this.state = signal({\n            value: 'inactive',\n            params: {\n                easeTime: this.toastPackage.config.easeTime,\n                easing: 'ease-in',\n            },\n        });\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state.update(state => ({ ...state, value: 'active' }));\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') &&\n            this.options.timeOut) {\n            this.outsideTimeout(() => this.remove(), this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.outsideInterval(() => this.updateProgress(), 10);\n            }\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width.set((remaining / this.options.timeOut) * 100);\n        if (this.options.progressAnimation === 'increasing') {\n            this.width.update(width => 100 - width);\n        }\n        if (this.width() <= 0) {\n            this.width.set(0);\n        }\n        if (this.width() >= 100) {\n            this.width.set(100);\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state.update(state => ({ ...state, value: 'active' }));\n        this.outsideTimeout(() => this.remove(), this.originalTimeout);\n        this.options.timeOut = this.originalTimeout;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state().value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state.update(state => ({ ...state, value: 'removed' }));\n        this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n    }\n    tapToast() {\n        if (this.state().value === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state().value === 'removed') {\n            return;\n        }\n        if (this.options.disableTimeOut !== 'extendedTimeOut') {\n            clearTimeout(this.timeout);\n            this.options.timeOut = 0;\n            this.hideTime = 0;\n            // disable progressBar\n            clearInterval(this.intervalId);\n            this.width.set(0);\n        }\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state().value === 'removed') {\n            return;\n        }\n        this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    outsideTimeout(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.timeout = setTimeout(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.timeout = setTimeout(() => func(), timeout);\n        }\n    }\n    outsideInterval(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.intervalId = setInterval(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.intervalId = setInterval(() => func(), timeout);\n        }\n    }\n    runInsideAngular(func) {\n        if (this.ngZone) {\n            this.ngZone.run(() => func());\n        }\n        else {\n            func();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Toast, deps: [{ token: ToastrService }, { token: ToastPackage }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.0\", type: Toast, isStandalone: true, selector: \"[toast-component]\", host: { listeners: { \"click\": \"tapToast()\", \"mouseenter\": \"stickAround()\", \"mouseleave\": \"delayedHideToast()\" }, properties: { \"class\": \"this.toastClasses\", \"@flyInOut\": \"this._state\", \"style.display\": \"this.displayStyle\" } }, ngImport: i0, template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n            trigger('flyInOut', [\n                state('inactive', style({ opacity: 0 })),\n                state('active', style({ opacity: 1 })),\n                state('removed', style({ opacity: 0 })),\n                transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n            ]),\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Toast, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[toast-component]',\n                    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `,\n                    animations: [\n                        trigger('flyInOut', [\n                            state('inactive', style({ opacity: 0 })),\n                            state('active', style({ opacity: 1 })),\n                            state('removed', style({ opacity: 0 })),\n                            transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                            transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n                        ]),\n                    ],\n                    preserveWhitespaces: false,\n                    standalone: true,\n                    imports: [NgIf],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: () => [{ type: ToastrService }, { type: ToastPackage }, { type: i0.NgZone }], propDecorators: { toastClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], _state: [{\n                type: HostBinding,\n                args: ['@flyInOut']\n            }], displayStyle: [{\n                type: HostBinding,\n                args: ['style.display']\n            }], tapToast: [{\n                type: HostListener,\n                args: ['click']\n            }], stickAround: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], delayedHideToast: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nconst DefaultGlobalConfig = {\n    ...DefaultNoComponentGlobalConfig,\n    toastComponent: Toast,\n};\n/**\n * @description\n * Provides the `TOAST_CONFIG` token with the given config.\n *\n * @param config The config to configure toastr.\n * @returns The environment providers.\n *\n * @example\n * ```ts\n * import { provideToastr } from 'ngx-toastr';\n *\n * bootstrap(AppComponent, {\n *   providers: [\n *     provideToastr({\n *       timeOut: 2000,\n *       positionClass: 'toast-top-right',\n *     }),\n *   ],\n * })\n */\nconst provideToastr = (config = {}) => {\n    const providers = [\n        {\n            provide: TOAST_CONFIG,\n            useValue: {\n                default: DefaultGlobalConfig,\n                config,\n            }\n        }\n    ];\n    return makeEnvironmentProviders(providers);\n};\n\nclass ToastrModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [provideToastr(config)],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule, imports: [Toast], exports: [Toast] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [Toast],\n                    exports: [Toast],\n                }]\n        }] });\nclass ToastrComponentlessModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoComponentGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\nclass ToastNoAnimation {\n    toastrService;\n    toastPackage;\n    appRef;\n    message;\n    title;\n    options;\n    duplicatesCount;\n    originalTimeout;\n    /** width of progress bar */\n    width = signal(-1);\n    /** a combination of toast type and options.toastClass */\n    toastClasses = '';\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state() === 'inactive') {\n            return 'none';\n        }\n        return null;\n    }\n    /** controls animation */\n    state = signal('inactive');\n    timeout;\n    intervalId;\n    hideTime;\n    sub;\n    sub1;\n    sub2;\n    sub3;\n    constructor(toastrService, toastPackage, appRef) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.appRef = appRef;\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state.set('active');\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n            this.timeout = setTimeout(() => {\n                this.remove();\n            }, this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.intervalId = setInterval(() => this.updateProgress(), 10);\n            }\n        }\n        if (this.options.onActivateTick) {\n            this.appRef.tick();\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width.set((remaining / this.options.timeOut) * 100);\n        if (this.options.progressAnimation === 'increasing') {\n            this.width.update(width => 100 - width);\n        }\n        if (this.width() <= 0) {\n            this.width.set(0);\n        }\n        if (this.width() >= 100) {\n            this.width.set(100);\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state.set('active');\n        this.options.timeOut = this.originalTimeout;\n        this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n        this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state() === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state.set('removed');\n        this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n    }\n    tapToast() {\n        if (this.state() === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state() === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width.set(0);\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state() === 'removed') {\n            return;\n        }\n        this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimation, deps: [{ token: ToastrService }, { token: ToastPackage }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.0\", type: ToastNoAnimation, isStandalone: true, selector: \"[toast-component]\", host: { listeners: { \"click\": \"tapToast()\", \"mouseenter\": \"stickAround()\", \"mouseleave\": \"delayedHideToast()\" }, properties: { \"class\": \"this.toastClasses\", \"style.display\": \"this.displayStyle\" } }, ngImport: i0, template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimation, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[toast-component]',\n                    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `,\n                    standalone: true,\n                    imports: [NgIf],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: () => [{ type: ToastrService }, { type: ToastPackage }, { type: i0.ApplicationRef }], propDecorators: { toastClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], displayStyle: [{\n                type: HostBinding,\n                args: ['style.display']\n            }], tapToast: [{\n                type: HostListener,\n                args: ['click']\n            }], stickAround: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], delayedHideToast: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\nconst DefaultNoAnimationsGlobalConfig = {\n    ...DefaultNoComponentGlobalConfig,\n    toastComponent: ToastNoAnimation,\n};\nclass ToastNoAnimationModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastNoAnimationModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoAnimationsGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule, imports: [ToastNoAnimation], exports: [ToastNoAnimation] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ToastNoAnimation],\n                    exports: [ToastNoAnimation],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService, provideToastr };\n\n"],"mappings":"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","names":["animation","state"],"x_google_ignoreList":[0,1]}