{
  "version": 3,
  "sources": ["angular:jit:template:src/app/login/login.html", "angular:jit:style:src/app/login/login.css", "src/app/login/login.ts", "src/app/login/login.spec.ts"],
  "sourcesContent": ["<main class=\"main d-flex justify-content-center align-items-center vh-100r\">\n \n<div class=\"p-5 border d-flex flex-column rounded bg-white shadow mt-5\" style=\"min-width: 500px; min-height: 600px;\">\n  \n    <form [formGroup]=\"empForm\" (ngSubmit)=\"onSubmit()\">\n\n  <h2  style=\"margin-bottom: 60px; text-align:center;\">Login Form </h2>\n  \n <div class=\"d-flex align-items-center gap-5 mb-2 \">\n    <label  class=\"mb-0\">Email</label>\n    <div class=\"w-100 mt-2\">\n    <input id=\"email\" type=\"email\" formControlName=\"email\" class=\"form-control w-75\" placeholder=\"Enter your Email\" ngModel>\n    <div class=\"text-danger lh-sm\" style=\"font-size: 13px;margin-left: 9px;\" *ngIf=\"empForm.controls['email'].invalid && (empForm.controls['email'].touched || empForm.controls['email'].dirty)\">\n    <label class=\"text-danger\" *ngIf=\"empForm.controls['email'].errors?.['required']\">Email required</label>\n    <label class=\"text-danger\" *ngIf=\"empForm.controls['email'].errors?.['emailStartError']\">Email can't start with number</label>\n    <label class=\"text-danger\" *ngIf=\"empForm.controls['email'].errors?.['emailDomainError']\">Invalid Email domain</label>\n    </div>\n  </div>\n  </div>\n\n\n  <div class=\"d-flex align-items-center gap-3\">\n    <label for=\"password\" class=\"mb-0\">Password</label>\n       <div class=\"w-100 mt-2\">\n    <input id=\"password\" type=\"password\" formControlName=\"password\" class=\"form-control w-75\" placeholder=\"Enter your password\" ngModel>\n   <div class=\"text-danger lh-sm\" style=\"font-size: 13px;margin-left: 9px;margin-top: 2px;\" *ngIf=\"empForm.controls['password'].invalid && (empForm.controls['password'].touched || empForm.controls['password'].dirty)\">\n  <label class=\"text-danger\" *ngIf=\"empForm.controls['password'].errors?.['pattern']\">Contact No. cannot be  other than digit</label>\n        <label class=\"text-danger\" *ngIf=\"empForm.controls['password'].errors?.['required']\">password. required</label>\n    <label class=\"text-danger\" *ngIf=\"empForm.controls['password'].errors?.['minlength']\">password at least 6 size</label>\n    </div>\n  </div>\n  </div>\n<div class=\"row m-5\">\n  <button class=\"btn btn-primary flex-grow-1 px-3\" type=\"submit\" [disabled]=\"empForm.invalid\">Login</button>\n  <h3 class=\"my-3 w-100 h-100\" style=\"text-align: center;\">Or</h3>\n  <button class=\"btn btn-primary flex-grow-1 px-3\" type=\"button\" [routerLink]=\"['/signup']\" >Register</button>\n</div>\n\n</form>\n</div>\n\n</main>", "/* src/app/login/login.css */\n/*# sourceMappingURL=login.css.map */\n", "import { Component } from '@angular/core';\nimport { FormControl, FormGroup, FormsModule ,Validators} from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { StudentLogin } from '../models/studentLogin';\nimport { Auth } from '../service/auth';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport EmailDomainValidator from '../validators/emailValidator';\nimport { CommonModule } from '@angular/common';\n@Component({\n  selector: 'app-login',\n  imports: [FormsModule,RouterLink,ReactiveFormsModule,CommonModule],\n  templateUrl: './login.html',\n  styleUrl: './login.css'\n})\nexport class Login {\n\n  allowedDomain =[\"consultadd.com\",\"hyperflex.com\",\"knowcloudai.com\"];\n  constructor(private authSevice:Auth,private toasterService:ToastrService,private cookieService:CookieService,private router:Router){}\n empForm = new FormGroup({\n  email: new FormControl('', {\n    validators: [Validators.required,EmailDomainValidator(this.allowedDomain)],\n  }),\n  password: new FormControl('', {\n    validators: [Validators.required,Validators.minLength(6)],\n  })\n });\n  onSubmit(){\n    const formData = this.empForm.value as StudentLogin;\n  \n    console.log(\"Function called after onsubmit\"+formData);\n    this.authSevice.login(formData).subscribe({\n  next: (res) =>{ \n   this.cookieService.set(\"token\",res.token,{path:'/'});\n   this.toasterService.success('Login Successfuly',\"Success\");\n  this.router.navigate(['/dashboard']);\n  },\n  error: (err) => {console.error('Login error', err);\n       this.toasterService.error('Invalid Credentials',\"Failed\");\n     this.router.navigate(['/login']);\n  }\n  \n});\n    \n  }\n\n}\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { Login } from './login';\n\ndescribe('Login', () => {\n  let component: Login;\n  let fixture: ComponentFixture<Login>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [Login]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(Login);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n"],
  "mappings": "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",
  "names": ["login_default", "init_login", "cov_1tubs6dmqp", "actualCoverage", "Login", "s", "authSevice", "toasterService", "cookieService", "router", "allowedDomain", "constructor", "f", "empForm", "FormGroup", "email", "FormControl", "validators", "Validators", "required", "EmailDomainValidator", "password", "minLength", "onSubmit", "formData", "value", "console", "log", "login", "subscribe", "next", "res", "set", "token", "path", "success", "navigate", "error", "err", "__decorate", "Component", "selector", "imports", "FormsModule", "RouterLink", "ReactiveFormsModule", "CommonModule", "template", "__NG_CLI_RESOURCE__0", "init_login"]
}
