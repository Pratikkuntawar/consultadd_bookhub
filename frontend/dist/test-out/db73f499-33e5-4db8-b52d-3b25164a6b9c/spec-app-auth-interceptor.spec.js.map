{
  "version": 3,
  "sources": ["src/app/auth-interceptor.spec.ts", "src/app/auth-interceptor.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { HTTP_INTERCEPTORS, HttpClient, HttpClientModule, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { authInterceptor } from './auth-interceptor';\nimport { CookieService } from 'ngx-cookie-service';\n\ndescribe('authInterceptor', () => {\n  let http: HttpClient;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientModule],\n      providers: [\n        CookieService,\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: authInterceptor,\n          multi: true\n        }\n      ]\n    });\n\n    http = TestBed.inject(HttpClient);\n  });\n\n  it('should be created', () => {\n    const interceptor = TestBed.inject(HTTP_INTERCEPTORS);\n    expect(interceptor).toBeTruthy();\n  });\n});\n", "import { HttpErrorResponse, HttpInterceptorFn } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { catchError, throwError } from 'rxjs';\n\nexport const authInterceptor: HttpInterceptorFn = (req, next) => {\n  const cookieService = inject(CookieService);\n  const router = inject(Router);\n  const token = cookieService.get('token');\n\n  let cloneReq = req.clone({ withCredentials: true });\n  \n  if (token) {\n    cloneReq = cloneReq.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  return next(cloneReq).pipe(\n    catchError((error: HttpErrorResponse) => {\n      if (\n        error.status === 401 ||\n        error.error?.message?.includes('JWT expired') ||\n        error.message?.includes('JWT expired')\n      ) {\n        cookieService.delete('token');\n        router.navigate(['/login']);\n      }\n      return throwError(() => error);\n    })\n  );\n};\n"],
  "mappings": "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",
  "names": ["cov_8b0bn9u8p", "actualCoverage", "s", "authInterceptor", "req", "next", "f", "cookieService", "inject", "CookieService", "router", "Router", "token", "get", "cloneReq", "clone", "withCredentials", "b", "setHeaders", "Authorization", "pipe", "catchError", "error", "status", "message", "includes", "delete", "navigate", "throwError"]
}
