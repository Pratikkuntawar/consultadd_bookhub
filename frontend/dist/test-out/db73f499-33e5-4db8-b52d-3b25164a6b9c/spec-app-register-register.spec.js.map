{
  "version": 3,
  "sources": ["angular:jit:template:src/app/register/register.html", "angular:jit:style:src/app/register/register.css", "src/app/register/register.ts", "src/app/register/register.spec.ts"],
  "sourcesContent": ["<main class=\"main d-flex justify-content-center align-items-center vh-100r\">\n \n<div class=\"p-5 border mb-5 d-flex flex-column rounded bg-white shadow mt-5\" style=\"min-width: 500px; max-height: 700px;\">\n  \n    <form [formGroup]=\"empForm\" (ngSubmit)=\"onSubmit()\">\n  <h2  style=\"margin-bottom: 30px; text-align:center;\">Register Form </h2>\n\n  <div class=\"d-flex align-items-center gap-5 mb-2 \">\n    <label  class=\"mb-0\">Name</label>\n    <div class=\"w-100 mt-2\">\n    <input id=\"name\" type=\"text\" formControlName=\"name\" class=\"form-control w-75\" placeholder=\"Enter your Name\" ngModel>\n    <div class=\"text-danger  lh-sm\" style=\"font-size: 13px;margin-left: 9px;margin-top: 2px;\" *ngIf=\"empForm.controls['name'].invalid && (empForm.controls['name'].touched || empForm.controls['name'].dirty)\">\n    <label class=\"text-danger\" *ngIf=\"empForm.controls['name'].errors?.['required']\">Name required</label>\n    <label class=\"text-danger\" *ngIf=\"empForm.controls['name'].errors?.['minlength']\">Minimum 4 length required</label>\n    </div>\n  </div>\n  </div>\n\n <div class=\"d-flex align-items-center gap-5 mb-2 \">\n    <label  class=\"mb-0\">Email</label>\n    <div class=\"w-100 mt-2\">\n    <input id=\"email\" type=\"email\" formControlName=\"email\" class=\"form-control w-75\" placeholder=\"Enter your Email\" ngModel>\n    <div class=\"text-danger lh-sm\" style=\"font-size: 13px;margin-left: 9px;\" *ngIf=\"empForm.controls['email'].invalid && (empForm.controls['email'].touched || empForm.controls['email'].dirty)\">\n    <label class=\"text-danger\" *ngIf=\"empForm.controls['email'].errors?.['required']\">Email required</label>\n    <label class=\"text-danger\" *ngIf=\"empForm.controls['email'].errors?.['emailStartError']\">Email can't start with number</label>\n    <label class=\"text-danger\" *ngIf=\"empForm.controls['email'].errors?.['emailDomainError']\">Invalid Email domain</label>\n    </div>\n  </div>\n  </div>\n\n   <div class=\"d-flex align-items-center gap-4 mb-2 \">\n    <label  class=\"mb-0\">Contact</label>\n     <div class=\"w-100 mt-2\">\n    <input id=\"contactNo\" type=\"text\" formControlName=\"contactNo\" class=\"form-control \" style=\"width: 70%;\" placeholder=\"Enter your Contact No.\" ngModel>\n      <div class=\"text-danger lh-sm\" style=\"font-size: 13px;margin-left: 9px;margin-top: 2px;\" *ngIf=\"empForm.controls['contactNo'].invalid && (empForm.controls['contactNo'].touched || empForm.controls['contactNo'].dirty)\">\n  <label class=\"text-danger\" *ngIf=\"empForm.controls['contactNo'].errors?.['pattern']\">Contact No. cannot be  other than digit</label>\n        <label class=\"text-danger\" *ngIf=\"empForm.controls['contactNo'].errors?.['required']\">Contact No. required</label>\n    <label class=\"text-danger\" *ngIf=\"empForm.controls['contactNo'].errors?.['minlength']\">Contact No. must be at least 10 digits</label>\n    <label class=\"text-danger\" *ngIf=\"empForm.controls['contactNo'].errors?.['maxlength']\">Contact No. cannot be more than 10 digits</label>\n    </div>\n  </div>\n  </div>\n\n  <div class=\"d-flex align-items-center gap-3\">\n    <label for=\"password\" class=\"mb-0\">Password</label>\n       <div class=\"w-100 mt-2\">\n    <input id=\"password\" type=\"password\" formControlName=\"password\" class=\"form-control w-75\" placeholder=\"Enter your password\" ngModel>\n   <div class=\"text-danger lh-sm\" style=\"font-size: 13px;margin-left: 9px;margin-top: 2px;\" *ngIf=\"empForm.controls['password'].invalid && (empForm.controls['password'].touched || empForm.controls['password'].dirty)\">\n  <label class=\"text-danger\" *ngIf=\"empForm.controls['password'].errors?.['pattern']\">Contact No. cannot be  other than digit</label>\n        <label class=\"text-danger\" *ngIf=\"empForm.controls['password'].errors?.['required']\">password. required</label>\n    <label class=\"text-danger\" *ngIf=\"empForm.controls['password'].errors?.['minlength']\">password at least 6 size</label>\n    </div>\n  </div>\n  </div>\n\n  \n<div class=\"row m-5\">\n <button class=\"btn btn-primary flex-grow-1 px-3\" type=\"submit\" [disabled]=\"empForm.invalid\">Register</button>\n  <h3 class=\"my-3 w-100 h-100\" style=\"text-align: center;\">Or</h3>\n <button class=\"btn btn-primary flex-grow-1 px-3\" type=\"button\" [routerLink]=\"['/login']\"   >Login</button>\n </div>\n\n</form>\n</div>\n\n</main>", "/* src/app/register/register.css */\n/*# sourceMappingURL=register.css.map */\n", "import { Component } from '@angular/core';\nimport { FormControl, FormGroup, FormsModule, Validators } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Router, RouterLink } from '@angular/router';\nimport { EmployeeModel } from '../models/Employee';\nimport { Auth } from '../service/auth';\nimport { CookieService } from 'ngx-cookie-service';\nimport { ToastrService } from 'ngx-toastr';\nimport EmailDomainValidator from '../validators/emailValidator';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-register',\n  imports: [FormsModule,ReactiveFormsModule,RouterLink,CommonModule],\n  templateUrl: './register.html',\n  styleUrl: './register.css'\n})\nexport class Register {\n   \n  allowedDomain =[\"consultadd.com\",\"hyperflex.com\",\"knowcloudai.com\"];\n  constructor(private authSevice:Auth,private toasterService:ToastrService,private cookieService:CookieService,private router:Router){}\n  empForm = new FormGroup({\n  name: new FormControl('', {\n    validators: [Validators.required,Validators.minLength(4)],\n  }),\n  email: new FormControl('', {\n    validators: [Validators.required,EmailDomainValidator(this.allowedDomain)],\n  }),\n  password: new FormControl('', {\n    validators: [Validators.required,Validators.minLength(6)],\n  }),\n   contactNo: new FormControl('', {\n    validators: [Validators.required,Validators.minLength(10), Validators.maxLength(10), Validators.pattern(/^\\d+$/)],\n  }),\n\n});\n\nonSubmit(){\n    const formData = this.empForm.value as any;\n\n    this.authSevice.register(formData).subscribe({\n  next: (res) =>{ \n   this.toasterService.success('Student Register Successfuly',\"Success\");\n  this.router.navigate(['/dashboard']);\n  },\n  error: (err) => {console.error('Login error', err);\n       const errorMsg = typeof err.error === 'string'\n    ? err.error\n    : err.error?.message || 'Something went wrong';\n    this.toasterService.error(\"User Alredy Exist\", \"Failed\");\n  }\n  \n});\n    \n  }\n}\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { Register } from './register';\n\ndescribe('Register', () => {\n  let component: Register;\n  let fixture: ComponentFixture<Register>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [Register]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(Register);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n"],
  "mappings": "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",
  "names": ["register_default", "init_register", "cov_9toc8wqoh", "actualCoverage", "Register", "s", "authSevice", "toasterService", "cookieService", "router", "allowedDomain", "constructor", "f", "empForm", "FormGroup", "name", "FormControl", "validators", "Validators", "required", "minLength", "email", "EmailDomainValidator", "password", "contactNo", "maxLength", "pattern", "onSubmit", "formData", "value", "register", "subscribe", "next", "res", "success", "navigate", "error", "err", "console", "errorMsg", "b", "message", "__decorate", "Component", "selector", "imports", "FormsModule", "ReactiveFormsModule", "RouterLink", "CommonModule", "template", "__NG_CLI_RESOURCE__0", "init_register"]
}
