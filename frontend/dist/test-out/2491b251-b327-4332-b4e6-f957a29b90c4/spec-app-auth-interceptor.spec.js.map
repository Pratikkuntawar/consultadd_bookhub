{
  "version": 3,
  "sources": ["src/app/auth-interceptor.spec.ts", "src/app/auth-interceptor.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { HTTP_INTERCEPTORS, HttpClient, HttpClientModule, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { authInterceptor } from './auth-interceptor';\nimport { CookieService } from 'ngx-cookie-service';\n\ndescribe('authInterceptor', () => {\n  let http: HttpClient;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientModule],\n      providers: [\n        CookieService,\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: authInterceptor,\n          multi: true\n        }\n      ]\n    });\n\n    http = TestBed.inject(HttpClient);\n  });\n\n  it('should be created', () => {\n    const interceptor = TestBed.inject(HTTP_INTERCEPTORS);\n    expect(interceptor).toBeTruthy();\n  });\n});\n", "import { HttpErrorResponse, HttpInterceptorFn } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { catchError, throwError } from 'rxjs';\n\nexport const authInterceptor: HttpInterceptorFn = (req, next) => {\n  const cookieService = inject(CookieService);\n  const router = inject(Router);\n  const token = cookieService.get('token');\n\n  let cloneReq = req.clone({ withCredentials: true });\n  \n  if (token) {\n    cloneReq = cloneReq.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  return next(cloneReq).pipe(\n    catchError((error: HttpErrorResponse) => {\n      if (\n        error.status === 401 ||\n        error.error?.message?.includes('JWT expired') ||\n        error.message?.includes('JWT expired')\n      ) {\n        cookieService.delete('token');\n        router.navigate(['/login']);\n      }\n      return throwError(() => error);\n    })\n  );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;ACAA;AACA;AACA;AACA;AAEO,IAAM,kBAAqC,CAAC,KAAK,SAAQ;AAC9D,QAAM,gBAAgB,OAAO,aAAa;AAC1C,QAAM,SAAS,OAAO,MAAM;AAC5B,QAAM,QAAQ,cAAc,IAAI,OAAO;AAEvC,MAAI,WAAW,IAAI,MAAM,EAAE,iBAAiB,KAAI,CAAE;AAElD,MAAI,OAAO;AACT,eAAW,SAAS,MAAM;MACxB,YAAY;QACV,eAAe,UAAU,KAAK;;KAEjC;EACH;AAEA,SAAO,KAAK,QAAQ,EAAE,KACpB,WAAW,CAAC,UAA4B;AACtC,QACE,MAAM,WAAW,OACjB,MAAM,OAAO,SAAS,SAAS,aAAa,KAC5C,MAAM,SAAS,SAAS,aAAa,GACrC;AACA,oBAAc,OAAO,OAAO;AAC5B,aAAO,SAAS,CAAC,QAAQ,CAAC;IAC5B;AACA,WAAO,WAAW,MAAM,KAAK;EAC/B,CAAC,CAAC;AAEN;;;AD/BA;AAEA,SAAS,mBAAmB,MAAK;AAC/B,MAAI;AAEJ,aAAW,MAAK;AACd,YAAQ,uBAAuB;MAC7B,SAAS,CAAC,gBAAgB;MAC1B,WAAW;QACT;QACA;UACE,SAAS;UACT,UAAU;UACV,OAAO;;;KAGZ;AAED,WAAO,QAAQ,OAAO,UAAU;EAClC,CAAC;AAED,KAAG,qBAAqB,MAAK;AAC3B,UAAM,cAAc,QAAQ,OAAO,iBAAiB;AACpD,WAAO,WAAW,EAAE,WAAU;EAChC,CAAC;AACH,CAAC;",
  "names": []
}
