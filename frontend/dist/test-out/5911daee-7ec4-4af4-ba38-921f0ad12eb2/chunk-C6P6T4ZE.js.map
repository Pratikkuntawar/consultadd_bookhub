{"version":3,"sources":["node_modules/ngx-cookie-service/fesm2022/ngx-cookie-service.mjs"],"sourcesContent":["import { isPlatformBrowser } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { DOCUMENT, PLATFORM_ID, Inject, Injectable } from '@angular/core';\n\nclass CookieService {\n    constructor(document, // Get the `PLATFORM_ID` so we can check if we're in a browser.\n    platformId) {\n        this.document = document;\n        this.platformId = platformId;\n        this.documentIsAccessible = isPlatformBrowser(this.platformId);\n    }\n    /**\n     * Get cookie Regular Expression\n     *\n     * @param name Cookie name\n     * @returns property RegExp\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    static getCookieRegExp(name) {\n        const escapedName = name.replace(/([[\\]{}()|=;+?,.*^$\\\\])/gi, '\\\\$1');\n        return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n    }\n    /**\n     * Gets the decoded version of an encoded component of a Uniform Resource Identifier (URI).\n     *\n     * @param encodedURIComponent A value representing an encoded URI component.\n     *\n     * @returns The decoded version of an encoded component of a Uniform Resource Identifier (URI).\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    static safeDecodeURIComponent(encodedURIComponent) {\n        try {\n            return decodeURIComponent(encodedURIComponent);\n        }\n        catch {\n            // probably it is not uri encoded. return as is\n            return encodedURIComponent;\n        }\n    }\n    /**\n     * Return `true` if {@link Document} is accessible, otherwise return `false`\n     *\n     * @param name Cookie name\n     * @returns boolean - whether cookie with specified name exists\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    check(name) {\n        if (!this.documentIsAccessible) {\n            return false;\n        }\n        name = encodeURIComponent(name);\n        const regExp = CookieService.getCookieRegExp(name);\n        return regExp.test(this.document.cookie);\n    }\n    /**\n     * Get cookies by name\n     *\n     * @param name Cookie name\n     * @returns property value\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    get(name) {\n        if (this.check(name)) {\n            name = encodeURIComponent(name);\n            const regExp = CookieService.getCookieRegExp(name);\n            const result = regExp.exec(this.document.cookie);\n            return result?.[1] ? CookieService.safeDecodeURIComponent(result[1]) : '';\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     * Get all cookies in JSON format\n     *\n     * @returns all the cookies in json\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    getAll() {\n        if (!this.documentIsAccessible) {\n            return {};\n        }\n        const cookies = {};\n        const document = this.document;\n        if (document.cookie && document.cookie !== '') {\n            document.cookie.split(';').forEach((currentCookie) => {\n                const [cookieName, cookieValue] = currentCookie.split('=');\n                cookies[CookieService.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = CookieService.safeDecodeURIComponent(cookieValue);\n            });\n        }\n        return cookies;\n    }\n    set(name, value, expiresOrOptions, path, domain, secure, sameSite, partitioned) {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\n            const optionsBody = {\n                expires: expiresOrOptions,\n                path,\n                domain,\n                secure,\n                sameSite: sameSite || 'Lax',\n                partitioned,\n            };\n            this.set(name, value, optionsBody);\n            return;\n        }\n        let cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n        const options = expiresOrOptions ? expiresOrOptions : {};\n        if (options.expires) {\n            if (typeof options.expires === 'number') {\n                const dateExpires = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\n                cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n            }\n            else {\n                cookieString += 'expires=' + options.expires.toUTCString() + ';';\n            }\n        }\n        if (options.path) {\n            cookieString += 'path=' + options.path + ';';\n        }\n        if (options.domain) {\n            cookieString += 'domain=' + options.domain + ';';\n        }\n        if (options.secure === false && options.sameSite === 'None') {\n            options.secure = true;\n            console.warn(`[ngx-cookie-service] Cookie ${name} was forced with secure flag because sameSite=None.` +\n                `More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`);\n        }\n        if (options.secure) {\n            cookieString += 'secure;';\n        }\n        if (!options.sameSite) {\n            options.sameSite = 'Lax';\n        }\n        cookieString += 'sameSite=' + options.sameSite + ';';\n        if (options.partitioned) {\n            cookieString += 'Partitioned;';\n        }\n        this.document.cookie = cookieString;\n    }\n    /**\n     * Delete cookie by name at given path and domain. If not path is not specified, cookie at '/' path will be deleted.\n     *\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     * @param secure Cookie secure flag\n     * @param sameSite Cookie sameSite flag - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    delete(name, path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        const expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\n        this.set(name, '', { expires: expiresDate, path, domain, secure, sameSite });\n    }\n    /**\n     * Delete all cookies at given path and domain. If not path is not specified, all cookies at '/' path will be deleted.\n     *\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     * @param secure Is the Cookie secure\n     * @param sameSite Is the cookie same site\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    deleteAll(path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        const cookies = this.getAll();\n        for (const cookieName in cookies) {\n            if (cookies.hasOwnProperty(cookieName)) {\n                this.delete(cookieName, path, domain, secure, sameSite);\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CookieService, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CookieService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CookieService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }] });\n\n/*\n * Public API Surface of ngx-cookie-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CookieService };\n\n"],"mappings":"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","names":[],"x_google_ignoreList":[0]}