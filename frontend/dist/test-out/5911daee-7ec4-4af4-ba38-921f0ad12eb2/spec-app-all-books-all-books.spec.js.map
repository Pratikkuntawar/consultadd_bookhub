{
  "version": 3,
  "sources": ["angular:jit:template:src/app/all-books/all-books.html", "angular:jit:style:src/app/all-books/all-books.css", "src/app/all-books/all-books.ts", "src/app/all-books/all-books.spec.ts"],
  "sourcesContent": ["\n\n\n<!-- <div class=\"book-container py-3\" style=\"background-color: #000000\">\n  <input\n    type=\"text\"\n    class=\"form-control mb-4\"\n    placeholder=\"Search by title or author\"\n    [(ngModel)]=\"searchQuery\"\n  />\n\n  <div class=\"book-container\">\n    <div\n      class=\"book-card\"\n      *ngFor=\"let book of filteredBooks()\"\n      \n      style=\"cursor: pointer\"\n    >\n      <img [src]=\"book.imageUrl\" [alt]=\"book.image\" class=\"book-image\" />\n      <h3 class=\"text-light book-title\">{{ book.title }}</h3>\n      <p class=\"text-light book-author\">Author: {{ book.author }}</p>\n      <p class=\"text-light book-price\">\u20B9{{ book.price }}</p>\n      <button class=\"btn btn-success mt-2\" >Add to Cart</button>\n    </div>\n  </div>\n</div> -->\n\n\n\n<div class=\"book-page py-4 px-3\" style=\"background-color: #000000; min-height: 100vh;\">\n  <!-- Search and Filter Section -->\n  <div class=\"d-flex flex-wrap gap-3 mb-4\">\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      placeholder=\"Search by title or author\"\n      [(ngModel)]=\"searchQuery\"\n      style=\"flex: 1; min-width: 200px;\"\n    />\n\n    <select\n      class=\"form-select\"\n      [(ngModel)]=\"selectedDepartment\"\n      style=\"width: 200px;\"\n    >\n      <option value=\"\">All Departments</option>\n      <option value=\"CODING\">Coding</option>\n      <option value=\"MARKETING\">Marketing</option>\n      <option value=\"SALES\">Sales</option>\n      <option value=\"DELIVERY\">Delivery</option>\n      <option value=\"HR\">HR</option>\n    </select>\n\n    <button class=\"btn btn-success\" (click)=\"applyFilters()\">Search</button>\n  </div>\n\n  <!-- Book Cards Section -->\n  <div class=\"d-flex flex-wrap gap-4 justify-content-center\">\n    <div\n      class=\"card p-2\"\n      *ngFor=\"let book of filteredBooksList\"\n      style=\"width: 250px; background-color: #1e1e1e; border: none;\"\n    >\n      <img\n        [src]=\"book.imageUrl\"\n        [alt]=\"book.image\"\n        class=\"card-img-top\"\n        style=\"height: 240px; object-fit: cover;\"\n      />\n      <div class=\"card-body p-2\">\n        <h5 class=\"card-title text-light mb-1\">{{ book.title }}</h5>\n        <p class=\"text-light mb-1\" style=\"font-size: 14px;\">Author: {{ book.author }}</p>\n        <p class=\"text-light mb-1\" style=\"font-size: 14px;\">Price: \u20B9{{ book.price }}</p>\n\n        <!-- Quantity Input -->\n        <input\n          type=\"number\"\n          class=\"form-control form-control-sm mb-2\"\n          min=\"1\"\n          [(ngModel)]=\"book.quantity\"\n          placeholder=\"1\"\n        />\n\n        <!-- Add to Cart Button -->\n        <button\n          class=\"btn btn-sm btn-success w-100\"\n          (click)=\"addToCart(book.id, book.quantity || 1)\"\n        >\n          Add to Cart\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n\n", "/* src/app/all-books/all-books.css */\ninput::placeholder {\n  text-align: center;\n}\n/*# sourceMappingURL=all-books.css.map */\n", "// import { Component } from '@angular/core';\n\n// @Component({\n//   selector: 'app-all-books',\n//   imports: [],\n//   templateUrl: './all-books.html',\n//   styleUrl: './all-books.css'\n// })\n// export class AllBooks {\n\n// }\nimport { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Router, RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-all-books',\n  imports: [RouterModule,CommonModule,FormsModule],\n  templateUrl: './all-books.html',\n  styleUrls: ['./all-books.css']\n})\n// export class AllBooksComponent implements OnInit {\n//   books: any[] = [];\n//   searchQuery: string = '';\n//   constructor(private http: HttpClient, private router: Router) {}\n\n\n\n//   ngOnInit(): void {\n//     const token = localStorage.getItem('token');\n//     // Replace with actual token from auth/localStorage\n//     const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n\n//     this.http.get<any[]>('http://localhost:8080/consultadd/books/getallbooks', { headers }).subscribe({\n//       next: (data) => {\n//         this.books = data;\n//         console.log('üìö Books fetched:', this.books);\n//       },\n//       error: (err) => {\n//         console.error('‚ùå Error fetching books:', err);\n//         alert('Failed to fetch books. Please check your token or try again.');\n//       }\n//     });\n//   }\n// //(click)=\"handleBookClick(book.id)\"\n//   handleBookClick(bookId: string) {\n//     this.router.navigate(['/book/', bookId]);\n//   }\n//    filteredBooks() {\n//     if (!this.searchQuery) {\n//       return this.books;\n//     }\n\n//     const query = this.searchQuery.toLowerCase();\n//     return this.books.filter(book =>\n//       book.title.toLowerCase().includes(query) ||\n//       book.author.toLowerCase().includes(query)\n//     );\n//   }\n// }\nexport class AllBooks implements OnInit {\n  books: any[] = [];\n  filteredBooksList: any[] = []; // üîß Add this line\n  searchQuery: string = '';\n  selectedDepartment: string = '';\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  ngOnInit(): void {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n\n    this.http.get<any[]>('http://localhost:8080/consultadd/books/getallbooks', { headers }).subscribe({\n      next: (data) => {\n        console.log(data);\n        this.books = data;\n        this.filteredBooksList = [...this.books]; \n      },\n      error: (err) => {\n        console.error('‚ùå Error fetching books:', err);\n        alert('Failed to fetch books. Please check your token or try again.');\n      }\n    });\n  }\n\n  applyFilters() {\n    const query = this.searchQuery.toLowerCase();\n\n    this.filteredBooksList = this.books.filter(book => {\n      const matchesSearch =\n        !this.searchQuery ||\n        book.title.toLowerCase().includes(query) ||\n        book.author.toLowerCase().includes(query);\n\n      const matchesDepartment =\n        !this.selectedDepartment ||\n        book.department.toLowerCase() === this.selectedDepartment.toLowerCase();\n\n      return matchesSearch && matchesDepartment;\n    });\n  }\n\n// addToCart(bookId: number, quantity: number): void {\n//   const payload = {\n//     bookId: bookId,\n//     quantity: quantity\n//   };\n\n//   const token = localStorage.getItem('token');\n//   console.log(\"Token sent in header: \", token);\n\n//   const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n\n//   this.http.post<any[]>('http://localhost:8080/buyer/cart/add', payload, { headers }).subscribe({\n//     next: (res) => alert('Book added to cart!'),\n//     error: (err) => {\n//       alert('Failed to add book to cart');\n//       console.error(\"Error details:\", err);\n//       console.log(token)\n//     }\n//   });\n// }\n\n// Make sure this is at the top\n\n// addToCart(bookId: number, quantity: number): void {\n//   const payload = {\n//     bookId: bookId,\n//     quantity: quantity\n//   };\n\n//   const token = localStorage.getItem('token');\n//   console.log(\"Token sent in header: \", token);\n\n//   const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n\n//   this.http.post<any[]>('http://localhost:8080/buyer/cart/add', payload, { headers }).subscribe({\n//     next: (res) => {\n//       Swal.fire({\n//         icon: 'success',\n//         title: 'Success!',\n//         text: 'üìö Book added to cart successfully!',\n//         confirmButtonColor: '#3085d6',\n//       });\n//     },\n//     error: (err) => {\n//       console.error(\"Error details:\", err);\n//       Swal.fire({\n//         icon: 'error',\n//         title: 'Error!',\n//         text: '‚ùå Failed to add book to cart. Please try again.',\n//         confirmButtonColor: '#d33',\n//       });\n//     }\n//   });\n// }\naddToCart(bookId: number, quantity: number): void {\n  const payload = {\n    bookId: bookId,\n    quantity: quantity\n  };\n\n  const token = localStorage.getItem('token');\n  console.log(\"Token sent in header: \", token);\n\n  const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n\n  this.http.post<any[]>('http://localhost:8080/buyer/cart/add', payload, { headers }).subscribe({\n    next: (res) => {\n      Swal.fire({\n        icon: 'success',\n        title: 'Success!',\n        text: 'üìö Book added to cart successfully!',\n        showConfirmButton: false,\n        timer: 2000,\n        timerProgressBar: true\n      });\n    },\n    error: (err) => {\n      console.error(\"Error details:\", err);\n      Swal.fire({\n        icon: 'error',\n        title: 'Error!',\n        text: '‚ùå Failed to add book to cart. Please try again.',\n        showConfirmButton: false,\n        timer: 2000,\n        timerProgressBar: true\n      });\n    }\n  });\n}\n\n\n\n}\n", "import { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { AllBooks } from './all-books';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport Swal from 'sweetalert2';\n\ndescribe('SignupComponent', () => {\n  let component: AllBooks;\n  let fixture: ComponentFixture<AllBooks>;\n  let httpMock: HttpTestingController;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [AllBooks],\n      imports: [HttpClientTestingModule, FormsModule]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(AllBooks);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n\n});\n"],
  "mappings": "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",
  "names": ["all_books_default", "init_all_books", "init_all_books", "AllBooks", "Swal", "init_all_books", "init_testing"]
}
