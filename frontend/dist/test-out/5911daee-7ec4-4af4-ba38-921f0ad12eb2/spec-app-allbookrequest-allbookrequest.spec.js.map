{
  "version": 3,
  "sources": ["angular:jit:template:src/app/allbookrequest/allbookrequest.html", "angular:jit:style:src/app/allbookrequest/allbookrequest.css", "src/app/allbookrequest/allbookrequest.ts", "src/app/allbookrequest/allbookrequest.spec.ts"],
  "sourcesContent": ["\n<div class=\"home-container\">\n  <div *ngFor=\"let user of users\" class=\"user-card\">\n    <img src=\"/books.webp\" alt=\"User\" class=\"user-image\">\n    <div class=\"user-details\">\n      <!-- <h5>Book Title:{{ user.title }}</h5>\n      <p>\uD83E\uDDD1\u200D\uD83D\uDCBC Author: {{ user.author}}</p>\n      <p>\uD83D\uDCE7 Reason: {{ user.reason}}</p>\n      <p>\uD83D\uDCF1 Requester ID: {{ user.requester.id}}</p>\n      <p>\uD83E\uDDD1\u200D\uD83D\uDCBC Request BY: {{ user.requester.fullName}}</p>\n      <p>Requester Email:{{user.requester.email}}</p> -->\n      <h5>\uD83D\uDCDA Book Title: {{ user.title }}</h5>\n<p>\u270D\uFE0F Author: {{ user.author }}</p>\n<p>\uD83D\uDCDD Reason: {{ user.reason }}</p>\n<p>\uD83C\uDD94 Requester ID: {{ user.requester.id }}</p>\n<p>\uD83D\uDE4B Request By: {{ user.requester.fullName }}</p>\n<p>\uD83D\uDCE7 Requester Email: {{ user.requester.email }}</p>\n    </div>\n  </div>\n</div>\n", "/* src/app/allbookrequest/allbookrequest.css */\nbody,\n.home-container {\n  background-color: #000000;\n  min-height: 100vh;\n  padding: 1rem;\n}\n.user-card {\n  display: flex;\n  align-items: center;\n  background-color: #ffffff;\n  color: #000000;\n  border-radius: 12px;\n  padding: 16px;\n  margin-bottom: 16px;\n  box-shadow: 0 4px 8px rgba(255, 255, 255, 0.1);\n  width: 100%;\n}\n.user-image {\n  width: 80px;\n  height: 80px;\n  margin-right: 20px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n.user-details h5 {\n  margin: 0 0 8px 0;\n  font-size: 1.25rem;\n}\n.user-details p {\n  margin: 2px 0;\n}\n/*# sourceMappingURL=allbookrequest.css.map */\n", "\nimport { CommonModule } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Component({\n  selector: 'app-getallusers',\n  standalone: true,\n  imports: [FormsModule, CommonModule],\n  templateUrl: './allbookrequest.html',\n  styleUrl: './allbookrequest.css'\n})\nexport class Allbookrequest implements OnInit {\n  users: any[] = [];\n\n  constructor(private http: HttpClient) {}\n\n  // ngOnInit(): void {\n  //   this.http.get<any[]>('http://localhost:8080/api/book-requests/all').subscribe(\n  //     (response) => {\n  //       this.users = response.map(request => ({\n  //         id: request.requester?.id,\n  //         name: request.requester?.fullName,\n  //         email: request.requester?.email,\n  //         department: request.requester?.department,\n  //         role: request.requester?.role\n  //       }));\n  //     },\n  //     (error) => {\n  //       console.error('Error fetching book requests:', error);\n  //     }\n  //   );\n  // }\n\n  ngOnInit(): void {\n    const token = localStorage.getItem('token');\n    const apiUrl = 'http://localhost:8080/api/book-requests/all';\n    if (token) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      });\n\n      this.http.get<any[]>(apiUrl, { headers }).subscribe({\n        next: (data) => {\n          console.log('Fetched Employees:', data);\n          this.users = data;\n        },\n        error: (error) => {\n          console.error('Failed to fetch employees:', error);\n        }\n      });\n    } else {\n      console.warn('No token found. Please login first.');\n    }\n  }\n}\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { Allbookrequest } from './allbookrequest';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\nfdescribe('Allbookrequest Component', () => {\n  let component: Allbookrequest;\n  let fixture: ComponentFixture<Allbookrequest>;\n  let httpMock: HttpTestingController;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule,Allbookrequest],\n      // declarations: [Allbookrequest],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA], // for custom elements if any\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(Allbookrequest);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n\n    // Set token before ngOnInit runs\n    localStorage.setItem('token', 'mock-token');\n  });\n\n  afterEach(() => {\n    httpMock.verify(); // Ensures no outstanding requests\n    localStorage.clear();\n  });\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n\n\n  it('should fetch users on init', () => {\n    const mockResponse = [\n      {\n        requester: {\n          id: 1,\n          fullName: 'Ram Kapoor',\n          email: 'ram@example.com',\n          department: 'CS',\n          role: 'student'\n        }\n      }\n    ];\n\n    component.ngOnInit();\n\n    const req = httpMock.expectOne('http://localhost:8080/api/book-requests/all');\n    expect(req.request.method).toBe('GET');\n    expect(req.request.headers.get('Authorization')).toBe('Bearer mock-token');\n    req.flush(mockResponse);\n\n    expect(component.users.length).toBe(1);\n    expect(component.users[0].requester.fullName).toBe('Ram Kapoor');\n  });\n\n  it('should warn if no token found', () => {\n    localStorage.removeItem('token');\n    const warnSpy = spyOn(console, 'warn');\n\n    component.ngOnInit();\n\n    expect(warnSpy).toHaveBeenCalledWith('No token found. Please login first.');\n  });\n\n  it('should handle HTTP error', () => {\n    const errorSpy = spyOn(console, 'error');\n\n    component.ngOnInit();\n\n    const req = httpMock.expectOne('http://localhost:8080/api/book-requests/all');\n    req.flush('Error fetching', { status: 401, statusText: 'Unauthorized' });\n\n    expect(errorSpy).toHaveBeenCalledWith('Failed to fetch employees:', jasmine.anything());\n  });\n\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA;AAAA,IAAAC,uBAAA;AAAA;AAAA,IAAAD,0BAAA;AAAA;AAAA;;;ICaa;;;;;;;AAZb;AACA;AACA;AACA;AASO,IAAM,iBAAN,MAAME,gBAAc;MAGL;MAFpB,QAAe,CAAA;MAEf,YAAoB,MAAgB;AAAhB,aAAA,OAAA;MAAmB;;;;;;;;;;;;;;;;;MAmBvC,WAAQ;AACN,cAAM,QAAQ,aAAa,QAAQ,OAAO;AAC1C,cAAM,SAAS;AACf,YAAI,OAAO;AACT,gBAAM,UAAU,IAAI,YAAY;YAC9B,gBAAgB;YAChB,iBAAiB,UAAU,KAAK;WACjC;AAED,eAAK,KAAK,IAAW,QAAQ,EAAE,QAAO,CAAE,EAAE,UAAU;YAClD,MAAM,CAAC,SAAQ;AACb,sBAAQ,IAAI,sBAAsB,IAAI;AACtC,mBAAK,QAAQ;YACf;YACA,OAAO,CAAC,UAAS;AACf,sBAAQ,MAAM,8BAA8B,KAAK;YACnD;WACD;QACH,OAAO;AACL,kBAAQ,KAAK,qCAAqC;QACpD;MACF;;;;;AA3CW,qBAAc,WAAA;MAP1B,UAAU;QACT,UAAU;QACV,YAAY;QACZ,SAAS,CAAC,aAAa,YAAY;QACnC,UAAA;;OAED;OACY,cAAc;;;;;ACb3B;;;AACA,IAAAC;AACA,IAAAC;AAEA;AAEA,cAAU,4BAA4B,MAAK;AACzC,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,yBAAwB,cAAc;;UAEhD,SAAS,CAAC,sBAAsB;;SACjC,EAAE,kBAAiB;AAEpB,kBAAU,QAAQ,gBAAgB,cAAc;AAChD,oBAAY,QAAQ;AACpB,mBAAW,QAAQ,OAAO,qBAAqB;AAG/C,qBAAa,QAAQ,SAAS,YAAY;MAC5C,EAAC;AAED,gBAAU,MAAK;AACb,iBAAS,OAAM;AACf,qBAAa,MAAK;MACpB,CAAC;AAED,SAAG,+BAA+B,MAAK;AACrC,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;AAGD,SAAG,8BAA8B,MAAK;AACpC,cAAM,eAAe;UACnB;YACE,WAAW;cACT,IAAI;cACJ,UAAU;cACV,OAAO;cACP,YAAY;cACZ,MAAM;;;;AAKZ,kBAAU,SAAQ;AAElB,cAAM,MAAM,SAAS,UAAU,6CAA6C;AAC5E,eAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,KAAK;AACrC,eAAO,IAAI,QAAQ,QAAQ,IAAI,eAAe,CAAC,EAAE,KAAK,mBAAmB;AACzE,YAAI,MAAM,YAAY;AAEtB,eAAO,UAAU,MAAM,MAAM,EAAE,KAAK,CAAC;AACrC,eAAO,UAAU,MAAM,CAAC,EAAE,UAAU,QAAQ,EAAE,KAAK,YAAY;MACjE,CAAC;AAED,SAAG,iCAAiC,MAAK;AACvC,qBAAa,WAAW,OAAO;AAC/B,cAAM,UAAU,MAAM,SAAS,MAAM;AAErC,kBAAU,SAAQ;AAElB,eAAO,OAAO,EAAE,qBAAqB,qCAAqC;MAC5E,CAAC;AAED,SAAG,4BAA4B,MAAK;AAClC,cAAM,WAAW,MAAM,SAAS,OAAO;AAEvC,kBAAU,SAAQ;AAElB,cAAM,MAAM,SAAS,UAAU,6CAA6C;AAC5E,YAAI,MAAM,kBAAkB,EAAE,QAAQ,KAAK,YAAY,eAAc,CAAE;AAEvE,eAAO,QAAQ,EAAE,qBAAqB,8BAA8B,QAAQ,SAAQ,CAAE;MACxF,CAAC;IAEH,CAAC;;;",
  "names": ["allbookrequest_default", "init_allbookrequest", "Allbookrequest", "init_allbookrequest", "init_testing"]
}
