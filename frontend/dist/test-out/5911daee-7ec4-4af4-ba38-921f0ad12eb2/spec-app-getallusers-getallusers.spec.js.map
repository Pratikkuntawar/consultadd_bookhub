{
  "version": 3,
  "sources": ["angular:jit:template:src/app/getallusers/getallusers.html", "angular:jit:style:src/app/getallusers/getallusers.css", "src/app/getallusers/getallusers.ts", "src/app/getallusers/getallusers.spec.ts"],
  "sourcesContent": ["\n<!-- In your component HTML -->\n<div class=\"home-container\">\n  <div *ngFor=\"let user of users\" class=\"user-card\">\n    <img src=\"/seller.png\" alt=\"User\" class=\"user-image\">\n    <div class=\"user-details\">\n      <h5>{{ user.fullName }}</h5>\n      <p>\uD83E\uDDD1\u200D\uD83D\uDCBCUser ID:{{user.id}}</p>\n      <p>\uD83D\uDCE7 Email: {{ user.email }}</p>\n      <p>\uD83D\uDCF1 Department: {{ user.department }}</p>\n      <p>\uD83E\uDDD1\u200D\uD83D\uDCBC Role: {{ user.role }}</p>\n    </div>\n  </div>\n</div>\n\n", "/* src/app/getallusers/getallusers.css */\nbody,\n.home-container {\n  background-color: #000000;\n  min-height: 100vh;\n  padding: 1rem;\n}\n.user-card {\n  display: flex;\n  align-items: center;\n  background-color: #ffffff;\n  color: #000000;\n  border-radius: 12px;\n  padding: 16px;\n  margin-bottom: 16px;\n  box-shadow: 0 4px 8px rgba(255, 255, 255, 0.1);\n  width: 100%;\n}\n.user-image {\n  width: 80px;\n  height: 80px;\n  margin-right: 20px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n.user-details h5 {\n  margin: 0 0 8px 0;\n  font-size: 1.25rem;\n}\n.user-details p {\n  margin: 2px 0;\n}\n.user-card {\n  gap: 50px;\n}\n/*# sourceMappingURL=getallusers.css.map */\n", "\nimport { CommonModule } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Component({\n  selector: 'app-getallusers',\n  standalone: true,\n  imports: [FormsModule, CommonModule],\n  templateUrl: './getallusers.html',\n  styleUrls: ['./getallusers.css']\n})\nexport class Getallusers implements OnInit {\n  users: any[] = [];\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit(): void {\n    const token = localStorage.getItem('token');\n    const apiUrl = 'http://localhost:8080/consultadd/admin/employees';\n\n    if (token) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      });\n\n      this.http.get<any[]>(apiUrl, { headers }).subscribe({\n        next: (data) => {\n          console.log('Fetched Employees:', data);\n          this.users = data;\n        },\n        error: (error) => {\n          console.error('Failed to fetch employees:', error);\n        }\n      });\n    } else {\n      console.warn('No token found. Please login first.');\n    }\n  }\n}\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { Getallusers } from './getallusers';\n\ndescribe('Getallusers', () => {\n  let component: Getallusers;\n  let fixture: ComponentFixture<Getallusers>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [Getallusers]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(Getallusers);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA;AAAA,IAAAC,oBAAA;AAAA;AAAA,IAAAD,uBAAA;AAAA;AAAA;;;ICaa;;;;;;;AAZb;AACA;AACA;AACA;AASO,IAAM,cAAN,MAAME,aAAW;MAGF;MAFpB,QAAe,CAAA;MAEf,YAAoB,MAAgB;AAAhB,aAAA,OAAA;MAAmB;MAEvC,WAAQ;AACN,cAAM,QAAQ,aAAa,QAAQ,OAAO;AAC1C,cAAM,SAAS;AAEf,YAAI,OAAO;AACT,gBAAM,UAAU,IAAI,YAAY;YAC9B,gBAAgB;YAChB,iBAAiB,UAAU,KAAK;WACjC;AAED,eAAK,KAAK,IAAW,QAAQ,EAAE,QAAO,CAAE,EAAE,UAAU;YAClD,MAAM,CAAC,SAAQ;AACb,sBAAQ,IAAI,sBAAsB,IAAI;AACtC,mBAAK,QAAQ;YACf;YACA,OAAO,CAAC,UAAS;AACf,sBAAQ,MAAM,8BAA8B,KAAK;YACnD;WACD;QACH,OAAO;AACL,kBAAQ,KAAK,qCAAqC;QACpD;MACF;;;;;AA3BW,kBAAW,WAAA;MAPvB,UAAU;QACT,UAAU;QACV,YAAY;QACZ,SAAS,CAAC,aAAa,YAAY;QACnC,UAAA;;OAED;OACY,WAAW;;;;;ACbxB;;;AAEA,IAAAC;AAEA,aAAS,eAAe,MAAK;AAC3B,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,WAAW;SACtB,EACA,kBAAiB;AAElB,kBAAU,QAAQ,gBAAgB,WAAW;AAC7C,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;IACH,CAAC;;;",
  "names": ["getallusers_default", "init_getallusers", "Getallusers", "init_getallusers"]
}
