{
  "version": 3,
  "sources": ["src/app/dashboard/dashboard.spec.ts", "angular:jit:template:src/app/dashboard/dashboard.html", "angular:jit:style:src/app/dashboard/dashboard.css", "src/app/dashboard/dashboard.ts"],
  "sourcesContent": ["import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { Dashboard } from './dashboard';\nimport { employeeService } from '../service/employee-service';\nimport { CookieService } from 'ngx-cookie-service';\nimport { of, throwError } from 'rxjs';\nimport { Component } from '@angular/core';\n\n// Mock HR and Marketing Components\n@Component({selector: 'app-hr-component', template: ''})\nclass MockHrComponent {}\n\n@Component({selector: 'app-marketing', template: ''})\nclass MockMarketingComponent {}\n\n// Mock EmployeeService\nclass MockEmployeeService {\n  getMyInfo() {\n    return of({\n      name: 'John Doe',\n      department: 'Engineering'\n    });\n  }\n}\n\ndescribe('Dashboard', () => {\n  let component: Dashboard;\n  let fixture: ComponentFixture<Dashboard>;\n  let mockEmployeeService: MockEmployeeService;\n\n  beforeEach(waitForAsync(() => {\n    TestBed.configureTestingModule({\n      declarations: [Dashboard, MockHrComponent, MockMarketingComponent],\n      providers: [\n        { provide: employeeService, useClass: MockEmployeeService },\n        CookieService\n      ]\n    })\n    .compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(Dashboard);\n    component = fixture.componentInstance;\n    mockEmployeeService = TestBed.inject(employeeService);\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should load employee info on init', () => {\n    expect(component.employeeInfo.name).toBe('John Doe');\n    expect(component.department).toBe('Engineering');\n  });\n\n  it('should set department to unknown on error', () => {\n    // Override getMyInfo to simulate error\n    spyOn(mockEmployeeService, 'getMyInfo').and.returnValue(throwError(() => new Error('Failed')));\n    component.getMyInfo();\n    expect(component.department).toBe('unknown');\n  });\n});\n", "\n<p class=\"h4 fw-lighter p-4\">Welcome To {{department!='unknown' ? department : ''}} Dashbaord - Mr/Ms <label style=\"font-family: cursive;\">{{employeeInfo.name}}. </label> </p>\n\n\n<div *ngIf=\"department=='unknown'\" class=\"row text-center\">\n   <h1 class=\"display-5 mt-5 p-5 \"> Wait Till Hr Assign You Team .....</h1>\n   <a href=\"https://www.consultadd.com/\" target=\"_blank\">Read about us ...</a>\n</div>\n\n<div class=\"container text-center\">\n   <app-hr-component></app-hr-component>\n</div>\n\n<div class=\"container \">\n  <app-marketing></app-marketing>\n</div>\n\n\n\n ", "/* src/app/dashboard/dashboard.css */\n/*# sourceMappingURL=dashboard.css.map */\n", "import { Component } from '@angular/core';\nimport { employeeService } from '../service/employee-service';\nimport { CookieService } from 'ngx-cookie-service';\nimport { EmployeeModel } from '../models/Employee';\nimport { CommonModule } from '@angular/common';\nimport { HrComponent } from '../Hr/hr-component/hr-component';\nimport { Marketing } from '../Marketing/marketing';\nimport { Login } from \"../login/login\";\n@Component({\n  selector: 'app-dashboard',\n  imports: [CommonModule, HrComponent, Marketing],\n  templateUrl: './dashboard.html',\n  styleUrl: './dashboard.css'\n})\n\nexport class Dashboard {\n       employeeInfo !:EmployeeModel;\n       department:string='unknown';  \n   constructor(private employeeService:employeeService,private cookieService: CookieService){};\n    ngOnInit() {\n    this.getMyInfo();\n  }\n\n\n   getMyInfo():void{\n       this.employeeService.getMyInfo().subscribe({\n      next: (res:any) => {\n        this.employeeInfo = res;\n        this.department=res.department ? res.department :'unknown';\n        console.log('Employee loaded:', this.employeeInfo);\n      },\n      error: (err) => {\n        console.error('Error while fetching employee data', err);\n        this.department='unknown';\n      }\n    });\n   }\n\n   \n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;A;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA,qBAAA;;;ACAA;AACA;AACA;AAEA;AACA;AACA;AASO,IAAM,YAAN,MAAMC,WAAS;EAGC;EAAwC;EAFxD;EACA,aAAkB;EACtB,YAAoBC,kBAAwC,eAA4B;AAApE,SAAA,kBAAAA;AAAwC,SAAA,gBAAA;EAA8B;EACzF,WAAQ;AACR,SAAK,UAAS;EAChB;EAGC,YAAS;AACL,SAAK,gBAAgB,UAAS,EAAG,UAAU;MAC5C,MAAM,CAAC,QAAW;AAChB,aAAK,eAAe;AACpB,aAAK,aAAW,IAAI,aAAa,IAAI,aAAY;AACjD,gBAAQ,IAAI,oBAAoB,KAAK,YAAY;MACnD;MACA,OAAO,CAAC,QAAO;AACb,gBAAQ,MAAM,sCAAsC,GAAG;AACvD,aAAK,aAAW;MAClB;KACD;EACF;;;;;;AArBU,YAAS,WAAA;EAPrB,UAAU;IACT,UAAU;IACV,SAAS,CAAC,cAAc,aAAa,SAAS;IAC9C,UAAA;;GAED;GAEY,SAAS;;;AHbtB;AACA;AACA;AACA;AAIA,IAAM,kBAAN,MAAMC,iBAAe;;AAAf,kBAAe,WAAA;EADpB,UAAU,EAAC,UAAU,oBAAoB,UAAU,GAAE,CAAC;GACjD,eAAe;AAGrB,IAAM,yBAAN,MAAMC,wBAAsB;;AAAtB,yBAAsB,WAAA;EAD3B,UAAU,EAAC,UAAU,iBAAiB,UAAU,GAAE,CAAC;GAC9C,sBAAsB;AAG5B,IAAM,sBAAN,MAAyB;EACvB,YAAS;AACP,WAAO,GAAG;MACR,MAAM;MACN,YAAY;KACb;EACH;;AAGF,SAAS,aAAa,MAAK;AACzB,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,aAAW,aAAa,MAAK;AAC3B,YAAQ,uBAAuB;MAC7B,cAAc,CAAC,WAAW,iBAAiB,sBAAsB;MACjE,WAAW;QACT,EAAE,SAAS,iBAAiB,UAAU,oBAAmB;QACzD;;KAEH,EACA,kBAAiB;EACpB,CAAC,CAAC;AAEF,aAAW,MAAK;AACd,cAAU,QAAQ,gBAAgB,SAAS;AAC3C,gBAAY,QAAQ;AACpB,0BAAsB,QAAQ,OAAO,eAAe;AACpD,YAAQ,cAAa;EACvB,CAAC;AAED,KAAG,iBAAiB,MAAK;AACvB,WAAO,SAAS,EAAE,WAAU;EAC9B,CAAC;AAED,KAAG,qCAAqC,MAAK;AAC3C,WAAO,UAAU,aAAa,IAAI,EAAE,KAAK,UAAU;AACnD,WAAO,UAAU,UAAU,EAAE,KAAK,aAAa;EACjD,CAAC;AAED,KAAG,6CAA6C,MAAK;AAEnD,UAAM,qBAAqB,WAAW,EAAE,IAAI,YAAY,WAAW,MAAM,IAAI,MAAM,QAAQ,CAAC,CAAC;AAC7F,cAAU,UAAS;AACnB,WAAO,UAAU,UAAU,EAAE,KAAK,SAAS;EAC7C,CAAC;AACH,CAAC;",
  "names": ["dashboard_default", "Dashboard", "employeeService", "MockHrComponent", "MockMarketingComponent"]
}
