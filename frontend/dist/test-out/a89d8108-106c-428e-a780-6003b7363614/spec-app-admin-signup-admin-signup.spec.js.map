{
  "version": 3,
  "sources": ["angular:jit:template:src/app/admin-signup/admin-signup.html", "angular:jit:style:src/app/admin-signup/admin-signup.css", "src/app/admin-signup/admin-signup.ts", "src/app/admin-signup/admin-signup.spec.ts"],
  "sourcesContent": ["<div class=\"modal-backdrop show\">\n  <div class=\"modal d-block\" tabindex=\"-1\">\n    <div class=\"modal-dialog modal-dialog-centered\">\n      <div class=\"modal-content text-center p-4 bg-dark text-light rounded custom-modal-content\">\n        <h5 class=\"modal-title mb-4 fw-bold\">Signup</h5>\n        <form (ngSubmit)=\"registerUser()\" class=\"needs-validation\" novalidate>\n          \n          <div class=\"form-group mb-3\">\n            <input type=\"text\" class=\"form-control text-center\" placeholder=\"Enter Full Name\" [(ngModel)]=\"signupData.fullName\" name=\"fullName\" required />\n          </div>\n          \n          <div class=\"form-group mb-3\">\n            <input type=\"email\" class=\"form-control text-center\" placeholder=\"Enter Email\" [(ngModel)]=\"signupData.email\" name=\"email\" required />\n          </div>\n          \n          <div class=\"form-group mb-3\">\n            <input type=\"password\" class=\"form-control text-center\" placeholder=\"Enter Password\" [(ngModel)]=\"signupData.password\" name=\"password\" required />\n          </div>\n\n          <div class=\"form-group mb-3\">\n            <select class=\"form-select text-center\" [(ngModel)]=\"signupData.role\" name=\"role\" required>\n              <option value=\"\" disabled selected>Select Role</option>\n              <option value=\"ADMIN\">ADMIN</option>\n            </select>\n          </div>\n\n          <div class=\"form-group mb-4\">\n            <select class=\"form-select text-center\" [(ngModel)]=\"signupData.department\" name=\"department\" required>\n              <option value=\"\" disabled selected>Select Department</option>\n              <option value=\"HR\">HR</option>\n              <option value=\"CODING\">Coding</option>\n              <option value=\"DELIVERY\">Delivery</option>\n              <option value=\"SALES\">Sales</option>\n              <option value=\"MARKETING\">Marketing</option>\n            </select>\n          </div>\n\n          <div class=\"d-grid gap-2 d-md-flex justify-content-center\">\n            <button type=\"submit\" class=\"btn btn-outline-primary px-4\" >Register</button>\n            <button type=\"button\" class=\"btn btn-outline-danger px-4\" (click)=\"handleClose()\">Close</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n", "/* src/app/admin-signup/admin-signup.css */\n/*# sourceMappingURL=admin-signup.css.map */\n", "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-admin-signup',\n  imports: [FormsModule],\n  templateUrl: './admin-signup.html',\n  styleUrl: './admin-signup.css'\n})\nexport class AdminSignup {\nconstructor(private http: HttpClient, private router: Router) {}\nshowModal: boolean = true;\n\nhandleClose() {\n this.router.navigate(['/admin-dashboard']);\n}\n\n  @Output() close = new EventEmitter<void>();\n  @Output() switchToLogin = new EventEmitter<void>();\n\n  signupData = {\n    fullName: '',\n    email: '',\n    password: '',\n    role: '',\n    department: ''\n  };\n\n  // registerUser() {\n  //   const apiUrl = 'http://localhost:8080/consultadd/admin/create-admin'; // âœ… Replace with your backend endpoint\n\n  //   this.http.post(apiUrl, this.signupData).subscribe({\n  //     next: (response) => {\n  //       console.log('Registration successful:', response);\n  //       alert('Registered successfully!');\n  //     },\n  //     error: (error) => {\n  //       console.error('Registration failed:', error);\n  //       alert('Registration failed. Please try again.');\n  //     }\n  //   });\n  // }\n  registerUser() {\n  const apiUrl = 'http://localhost:8080/consultadd/admin/create-admin';\n  const token = localStorage.getItem('token');\n\n  const headers = new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${token}`\n  });\n\n  this.http.post(apiUrl, this.signupData, { headers }).subscribe({\n    next: (response) => {\n      console.log('Registration successful:', response);\n      alert('Registered successfully!');\n      this.router.navigate(['/admin-dashboard']);\n    },\n    error: (error) => {\n      console.error('Registration failed:', error);\n      alert('Registration failed. Please try again.');\n    }\n  });\n}\n\n}\n", "// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { AdminSignup } from './admin-signup';\n\n// describe('AdminSignup', () => {\n//   let component: AdminSignup;\n//   let fixture: ComponentFixture<AdminSignup>;\n\n//   beforeEach(async () => {\n//     await TestBed.configureTestingModule({\n//       imports: [AdminSignup]\n//     })\n//     .compileComponents();\n\n//     fixture = TestBed.createComponent(AdminSignup);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { AdminSignup } from './admin-signup';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\nfdescribe('AdminSignup', () => {\n  let component: AdminSignup;\n  let fixture: ComponentFixture<AdminSignup>;\n  let mockRouter: jasmine.SpyObj<Router>;\n\n  beforeEach(async () => {\n    mockRouter = jasmine.createSpyObj('Router', ['navigate']);\n\n    await TestBed.configureTestingModule({\n      imports: [\n        AdminSignup,              // Standalone component\n        HttpClientTestingModule,  //  For HttpClient\n        FormsModule               //  Required since component imports it\n      ],\n      providers: [\n        { provide: Router, useValue: mockRouter } //  Mocked Router\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(AdminSignup);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should call registerUser and navigate on successful registration', () => {\n    spyOn(component['http'], 'post').and.callFake(() => {\n      return {\n        subscribe: ({ next }: any) => next({ message: 'Success' })\n      } as any;\n    });\n\n    component.signupData = {\n      fullName: 'John Doe',\n      email: 'john@consultadd.com',\n      password: 'password',\n      role: 'ADMIN',\n      department: 'HR'\n    };\n\n    component.registerUser();\n    expect(mockRouter.navigate).toHaveBeenCalledWith(['/admin-dashboard']);\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA;AAAA,IAAAC,qBAAA;AAAA;AAAA,IAAAD,wBAAA;AAAA;AAAA;;;ICWa;;;;;;;AAXb;AACA;AACA;AACA;AAQO,IAAM,cAAN,MAAME,aAAW;MACJ;MAA0B;MAA9C,YAAoB,MAA0B,QAAc;AAAxC,aAAA,OAAA;AAA0B,aAAA,SAAA;MAAiB;MAC/D,YAAqB;MAErB,cAAW;AACV,aAAK,OAAO,SAAS,CAAC,kBAAkB,CAAC;MAC1C;MAEY,QAAQ,IAAI,aAAY;MACxB,gBAAgB,IAAI,aAAY;MAE1C,aAAa;QACX,UAAU;QACV,OAAO;QACP,UAAU;QACV,MAAM;QACN,YAAY;;;;;;;;;;;;;;;MAiBd,eAAY;AACZ,cAAM,SAAS;AACf,cAAM,QAAQ,aAAa,QAAQ,OAAO;AAE1C,cAAM,UAAU,IAAI,YAAY;UAC9B,gBAAgB;UAChB,iBAAiB,UAAU,KAAK;SACjC;AAED,aAAK,KAAK,KAAK,QAAQ,KAAK,YAAY,EAAE,QAAO,CAAE,EAAE,UAAU;UAC7D,MAAM,CAAC,aAAY;AACjB,oBAAQ,IAAI,4BAA4B,QAAQ;AAChD,kBAAM,0BAA0B;AAChC,iBAAK,OAAO,SAAS,CAAC,kBAAkB,CAAC;UAC3C;UACA,OAAO,CAAC,UAAS;AACf,oBAAQ,MAAM,wBAAwB,KAAK;AAC3C,kBAAM,wCAAwC;UAChD;SACD;MACH;;;;;;wBA7CG,OAAM,CAAA;gCACN,OAAM,CAAA;;;AATI,kBAAW,WAAA;MANvB,UAAU;QACT,UAAU;QACV,SAAS,CAAC,WAAW;QACrB,UAAA;;OAED;OACY,WAAW;;;;;ACXxB;;AAwBA;AACA,IAAAC;AACA,IAAAC;AACA;AACA;AAEA,cAAU,eAAe,MAAK;AAC5B,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,qBAAa,QAAQ,aAAa,UAAU,CAAC,UAAU,CAAC;AAExD,cAAM,QAAQ,uBAAuB;UACnC,SAAS;YACP;;YACA;;YACA;;;UAEF,WAAW;YACT,EAAE,SAAS,QAAQ,UAAU,WAAU;;;SAE1C,EAAE,kBAAiB;AAEpB,kBAAU,QAAQ,gBAAgB,WAAW;AAC7C,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,+BAA+B,MAAK;AACrC,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;AAED,SAAG,oEAAoE,MAAK;AAC1E,cAAM,UAAU,MAAM,GAAG,MAAM,EAAE,IAAI,SAAS,MAAK;AACjD,iBAAO;YACL,WAAW,CAAC,EAAE,KAAI,MAAY,KAAK,EAAE,SAAS,UAAS,CAAE;;QAE7D,CAAC;AAED,kBAAU,aAAa;UACrB,UAAU;UACV,OAAO;UACP,UAAU;UACV,MAAM;UACN,YAAY;;AAGd,kBAAU,aAAY;AACtB,eAAO,WAAW,QAAQ,EAAE,qBAAqB,CAAC,kBAAkB,CAAC;MACvE,CAAC;IACH,CAAC;;;",
  "names": ["admin_signup_default", "init_admin_signup", "AdminSignup", "init_admin_signup", "init_testing"]
}
