{
  "version": 3,
  "sources": ["src/app/login/login.spec.ts"],
  "sourcesContent": ["// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { LoginComponent } from './login';\n\n// describe('Login', () => {\n//   let component: LoginComponent;\n//   let fixture: ComponentFixture<LoginComponent>;\n\n//   beforeEach(async () => {\n//     await TestBed.configureTestingModule({\n//       imports: [LoginComponent]\n//     })\n//     .compileComponents();\n\n//     fixture = TestBed.createComponent(LoginComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\nimport { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { LoginComponent } from './login';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport Swal, { SweetAlertOptions, SweetAlertResult } from 'sweetalert2';\n\n\ndescribe('LoginComponent', () => {\n  let component: LoginComponent;\n  let fixture: ComponentFixture<LoginComponent>;\n  let httpMock: HttpTestingController;\n  const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [\n        LoginComponent,\n        FormsModule,\n        CommonModule,\n        HttpClientTestingModule\n      ],\n      providers: [\n        { provide: Router, useValue: routerSpy }\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n    localStorage.clear();\n  });\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should login and navigate to seller dashboard', fakeAsync(() => {\n    spyOn(Swal, 'fire').and.returnValue(Promise.resolve({} as SweetAlertResult));\n    component.loginData = { email: 'seller@example.com', password: '123456' };\n    component.onSubmit();\n\n    const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/login');\n    expect(req.request.method).toBe('POST');\n    req.flush({\n      token: 'mockToken',\n      role: 'SELLER',\n      employeeId: 'S001'\n    });\n\n    tick(); // Wait for Swal.then()\n    expect(localStorage.getItem('token')).toBe('mockToken');\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/seller-dashboard']);\n  }));\n\n  it('should navigate to buyer dashboard', fakeAsync(() => {\n    spyOn(Swal, 'fire').and.returnValue(Promise.resolve({} as SweetAlertResult));\n    component.loginData = { email: 'buyer@example.com', password: 'buyerpass' };\n    component.onSubmit();\n\n    const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/login');\n    req.flush({\n      token: 'buyerToken',\n      role: 'BUYER',\n      employeeId: 'B001'\n    });\n\n    tick();\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/buyer-dashboard']);\n  }));\n\n  it('should navigate to admin dashboard', fakeAsync(() => {\n    spyOn(Swal, 'fire').and.returnValue(Promise.resolve({} as SweetAlertResult));\n    component.loginData = { email: 'admin@example.com', password: 'adminpass' };\n    component.onSubmit();\n\n    const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/login');\n    req.flush({\n      token: 'adminToken',\n      role: 'ADMIN',\n      employeeId: 'A001'\n    });\n\n    tick();\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/admin-dashboard']);\n  }));\n\n  it('should show alert and navigate to root for unknown role', fakeAsync(() => {\n    spyOn(window, 'alert');\n    spyOn(Swal, 'fire').and.returnValue(Promise.resolve({} as SweetAlertResult));\n\n    component.loginData = { email: 'guest@example.com', password: 'guestpass' };\n    component.onSubmit();\n\n    const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/login');\n    req.flush({\n      token: 'guestToken',\n      role: 'GUEST',\n      employeeId: 'G001'\n    });\n\n    tick();\n    expect(window.alert).toHaveBeenCalledWith('Unknown role');\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/']);\n  }));\n\n  //it('should show Swal error popup on login failure', fakeAsync(() => {\n  //   const swalSpy = spyOn(Swal, 'fire').and.returnValue(Promise.resolve({} as SweetAlertResult));\n\n  //   component.loginData = { email: 'fail@example.com', password: 'wrong' };\n  //   component.onSubmit();\n\n  //   const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/login');\n  //   req.flush({ message: 'Unauthorized' }, { status: 401, statusText: 'Unauthorized' });\n\n  //   tick();\n  //   expect(swalSpy).toHaveBeenCalledWith({\n  //     icon: 'error',\n  //     title: 'Login Failed',\n  //     text: 'Please check your credentials and try again.',\n  //     timer: 2000,\n  //     showConfirmButton: false,\n  //     timerProgressBar: true\n  //   });\n  // }));\n  it('should show SweetAlert with correct message on login failure', () => {\n  spyOn(component['http'], 'post').and.returnValue({\n    subscribe: ({ error }: any) => error({ status: 401 })\n  } as any);\n\n  const swalSpy = spyOn(Swal, 'fire').and.returnValue(Promise.resolve({} as SweetAlertResult<any>));\n\n  component.onSubmit();\n\n  expect(swalSpy).toHaveBeenCalledWith(jasmine.objectContaining({\n    icon: 'error',\n    title: 'Login Failed',\n    text: 'Please check your credentials and try again.',\n    timer: 2000,\n    showConfirmButton: false,\n    timerProgressBar: true\n  }));\n});\n\n});\n"],
  "mappings": "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",
  "names": ["init_testing", "Swal"]
}
