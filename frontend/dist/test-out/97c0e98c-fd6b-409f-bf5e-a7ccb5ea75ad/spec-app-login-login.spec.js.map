{
  "version": 3,
  "sources": ["src/app/login/login.spec.ts"],
  "sourcesContent": ["// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { LoginComponent } from './login';\n\n// describe('Login', () => {\n//   let component: LoginComponent;\n//   let fixture: ComponentFixture<LoginComponent>;\n\n//   beforeEach(async () => {\n//     await TestBed.configureTestingModule({\n//       imports: [LoginComponent]\n//     })\n//     .compileComponents();\n\n//     fixture = TestBed.createComponent(LoginComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { LoginComponent } from './login';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nfdescribe('LoginComponent', () => {\n  let component: LoginComponent;\n  let fixture: ComponentFixture<LoginComponent>;\n  let httpMock: HttpTestingController;\n  const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [\n        LoginComponent, // âœ… Standalone component goes here\n        FormsModule,\n        CommonModule,\n        HttpClientTestingModule\n      ],\n      providers: [\n        { provide: Router, useValue: routerSpy }\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should make login request and navigate to seller dashboard', () => {\n    component.loginData = { email: 'test@example.com', password: '123456' };\n    component.onSubmit();\n\n    const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/login');\n    expect(req.request.method).toBe('POST');\n    req.flush({\n      token: 'mockToken',\n      role: 'SELLER',\n      employeeId: 'E123'\n    });\n\n    expect(localStorage.getItem('token')).toBe('mockToken');\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/seller-dashboard']);\n  });\n\n  it('should navigate to buyer dashboard if role is BUYER', () => {\n    component.loginData = { email: 'buyer@example.com', password: 'buyerpass' };\n    component.onSubmit();\n\n    const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/login');\n    req.flush({\n      token: 'buyerToken',\n      role: 'BUYER',\n      employeeId: 'B101'\n    });\n\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/buyer-dashboard']);\n  });\n\n  it('should show alert and navigate to root for unknown role', () => {\n    spyOn(window, 'alert');\n    component.loginData = { email: 'unknown@example.com', password: '123456' };\n    component.onSubmit();\n\n    const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/login');\n    req.flush({\n      token: 'xyz',\n      role: 'GUEST',\n      employeeId: 'G001'\n    });\n\n    expect(window.alert).toHaveBeenCalledWith('Unknown role');\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/']);\n  });\n\n  it('should show alert on login failure', () => {\n    spyOn(window, 'alert');\n    component.loginData = { email: 'fail@example.com', password: 'wrong' };\n    component.onSubmit();\n\n    const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/login');\n    req.flush({ message: 'Unauthorized' }, { status: 401, statusText: 'Unauthorized' });\n\n    expect(window.alert).toHaveBeenCalledWith('Login failed. Please check your credentials.');\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAuBA;AACA;AACA,IAAAA;AACA;AACA;AACA;AAEA,cAAU,kBAAkB,MAAK;AAC/B,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,YAAM,YAAY,QAAQ,aAAa,UAAU,CAAC,UAAU,CAAC;AAE7D,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS;YACP;;YACA;YACA;YACA;;UAEF,WAAW;YACT,EAAE,SAAS,QAAQ,UAAU,UAAS;;SAEzC,EAAE,kBAAiB;AAEpB,kBAAU,QAAQ,gBAAgB,cAAc;AAChD,oBAAY,QAAQ;AACpB,mBAAW,QAAQ,OAAO,qBAAqB;AAC/C,gBAAQ,cAAa;MACvB,EAAC;AAED,gBAAU,MAAK;AACb,iBAAS,OAAM;MACjB,CAAC;AAED,SAAG,+BAA+B,MAAK;AACrC,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;AAED,SAAG,8DAA8D,MAAK;AACpE,kBAAU,YAAY,EAAE,OAAO,oBAAoB,UAAU,SAAQ;AACrE,kBAAU,SAAQ;AAElB,cAAM,MAAM,SAAS,UAAU,6CAA6C;AAC5E,eAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,MAAM;AACtC,YAAI,MAAM;UACR,OAAO;UACP,MAAM;UACN,YAAY;SACb;AAED,eAAO,aAAa,QAAQ,OAAO,CAAC,EAAE,KAAK,WAAW;AACtD,eAAO,UAAU,QAAQ,EAAE,qBAAqB,CAAC,mBAAmB,CAAC;MACvE,CAAC;AAED,SAAG,uDAAuD,MAAK;AAC7D,kBAAU,YAAY,EAAE,OAAO,qBAAqB,UAAU,YAAW;AACzE,kBAAU,SAAQ;AAElB,cAAM,MAAM,SAAS,UAAU,6CAA6C;AAC5E,YAAI,MAAM;UACR,OAAO;UACP,MAAM;UACN,YAAY;SACb;AAED,eAAO,UAAU,QAAQ,EAAE,qBAAqB,CAAC,kBAAkB,CAAC;MACtE,CAAC;AAED,SAAG,2DAA2D,MAAK;AACjE,cAAM,QAAQ,OAAO;AACrB,kBAAU,YAAY,EAAE,OAAO,uBAAuB,UAAU,SAAQ;AACxE,kBAAU,SAAQ;AAElB,cAAM,MAAM,SAAS,UAAU,6CAA6C;AAC5E,YAAI,MAAM;UACR,OAAO;UACP,MAAM;UACN,YAAY;SACb;AAED,eAAO,OAAO,KAAK,EAAE,qBAAqB,cAAc;AACxD,eAAO,UAAU,QAAQ,EAAE,qBAAqB,CAAC,GAAG,CAAC;MACvD,CAAC;AAED,SAAG,sCAAsC,MAAK;AAC5C,cAAM,QAAQ,OAAO;AACrB,kBAAU,YAAY,EAAE,OAAO,oBAAoB,UAAU,QAAO;AACpE,kBAAU,SAAQ;AAElB,cAAM,MAAM,SAAS,UAAU,6CAA6C;AAC5E,YAAI,MAAM,EAAE,SAAS,eAAc,GAAI,EAAE,QAAQ,KAAK,YAAY,eAAc,CAAE;AAElF,eAAO,OAAO,KAAK,EAAE,qBAAqB,8CAA8C;MAC1F,CAAC;IACH,CAAC;;;",
  "names": ["init_testing"]
}
