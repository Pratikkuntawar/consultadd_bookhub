{"version":3,"sources":["node_modules/@angular/router/fesm2022/testing.mjs","src/app/signup/signup.spec.ts"],"sourcesContent":["/**\n * @license Angular v20.1.0\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { NgModule, Injectable, signal, Component, ViewChild } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { ROUTES, ROUTER_CONFIGURATION, RouterOutlet, Router, afterNextNavigation } from './router2.mjs';\nexport { ɵEmptyOutletComponent as ɵɵEmptyOutletComponent } from './router2.mjs';\nimport { RouterModule, ROUTER_PROVIDERS, withPreloading, NoPreloading } from './router_module.mjs';\nexport { RouterLink as ɵɵRouterLink, RouterLinkActive as ɵɵRouterLinkActive } from './router_module.mjs';\nimport { provideLocationMocks } from '@angular/common/testing';\nimport '@angular/common';\nimport 'rxjs';\nimport 'rxjs/operators';\nimport '@angular/platform-browser';\n\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location` and `LocationStrategy`.\n *\n * @usageNotes\n * ### Example\n *\n * ```ts\n * beforeEach(() => {\n *   TestBed.configureTestingModule({\n *     imports: [\n *       RouterModule.forRoot(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * @publicApi\n * @deprecated Use `provideRouter` or `RouterModule`/`RouterModule.forRoot` instead.\n * This module was previously used to provide a helpful collection of test fakes,\n * most notably those for `Location` and `LocationStrategy`.  These are generally not\n * required anymore, as `MockPlatformLocation` is provided in `TestBed` by default.\n * However, you can use them directly with `provideLocationMocks`.\n */\nclass RouterTestingModule {\n    static withRoutes(routes, config) {\n        return {\n            ngModule: RouterTestingModule,\n            providers: [\n                { provide: ROUTES, multi: true, useValue: routes },\n                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },\n            ],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: RouterTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.1.0\", ngImport: i0, type: RouterTestingModule, exports: [RouterModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: RouterTestingModule, providers: [\n            ROUTER_PROVIDERS,\n            provideLocationMocks(),\n            withPreloading(NoPreloading).ɵproviders,\n            { provide: ROUTES, multi: true, useValue: [] },\n        ], imports: [RouterModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: RouterTestingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [RouterModule],\n                    providers: [\n                        ROUTER_PROVIDERS,\n                        provideLocationMocks(),\n                        withPreloading(NoPreloading).ɵproviders,\n                        { provide: ROUTES, multi: true, useValue: [] },\n                    ],\n                }]\n        }] });\n\nclass RootFixtureService {\n    fixture;\n    harness;\n    createHarness() {\n        if (this.harness) {\n            throw new Error('Only one harness should be created per test.');\n        }\n        this.harness = new RouterTestingHarness(this.getRootFixture());\n        return this.harness;\n    }\n    getRootFixture() {\n        if (this.fixture !== undefined) {\n            return this.fixture;\n        }\n        this.fixture = TestBed.createComponent(RootCmp);\n        this.fixture.detectChanges();\n        return this.fixture;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: RootFixtureService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: RootFixtureService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: RootFixtureService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nclass RootCmp {\n    outlet;\n    routerOutletData = signal(undefined, ...(ngDevMode ? [{ debugName: \"routerOutletData\" }] : []));\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: RootCmp, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.1.0\", type: RootCmp, isStandalone: true, selector: \"ng-component\", viewQueries: [{ propertyName: \"outlet\", first: true, predicate: RouterOutlet, descendants: true }], ngImport: i0, template: '<router-outlet [routerOutletData]=\"routerOutletData()\"></router-outlet>', isInline: true, dependencies: [{ kind: \"directive\", type: RouterOutlet, selector: \"router-outlet\", inputs: [\"name\", \"routerOutletData\"], outputs: [\"activate\", \"deactivate\", \"attach\", \"detach\"], exportAs: [\"outlet\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.0\", ngImport: i0, type: RootCmp, decorators: [{\n            type: Component,\n            args: [{\n                    template: '<router-outlet [routerOutletData]=\"routerOutletData()\"></router-outlet>',\n                    imports: [RouterOutlet],\n                }]\n        }], propDecorators: { outlet: [{\n                type: ViewChild,\n                args: [RouterOutlet]\n            }] } });\n/**\n * A testing harness for the `Router` to reduce the boilerplate needed to test routes and routed\n * components.\n *\n * @publicApi\n */\nclass RouterTestingHarness {\n    /**\n     * Creates a `RouterTestingHarness` instance.\n     *\n     * The `RouterTestingHarness` also creates its own root component with a `RouterOutlet` for the\n     * purposes of rendering route components.\n     *\n     * Throws an error if an instance has already been created.\n     * Use of this harness also requires `destroyAfterEach: true` in the `ModuleTeardownOptions`\n     *\n     * @param initialUrl The target of navigation to trigger before returning the harness.\n     */\n    static async create(initialUrl) {\n        const harness = TestBed.inject(RootFixtureService).createHarness();\n        if (initialUrl !== undefined) {\n            await harness.navigateByUrl(initialUrl);\n        }\n        return harness;\n    }\n    /**\n     * Fixture of the root component of the RouterTestingHarness\n     */\n    fixture;\n    /** @internal */\n    constructor(fixture) {\n        this.fixture = fixture;\n    }\n    /** Instructs the root fixture to run change detection. */\n    detectChanges() {\n        this.fixture.detectChanges();\n    }\n    /** The `DebugElement` of the `RouterOutlet` component. `null` if the outlet is not activated. */\n    get routeDebugElement() {\n        const outlet = this.fixture.componentInstance.outlet;\n        if (!outlet || !outlet.isActivated) {\n            return null;\n        }\n        return this.fixture.debugElement.query((v) => v.componentInstance === outlet.component);\n    }\n    /** The native element of the `RouterOutlet` component. `null` if the outlet is not activated. */\n    get routeNativeElement() {\n        return this.routeDebugElement?.nativeElement ?? null;\n    }\n    async navigateByUrl(url, requiredRoutedComponentType) {\n        const router = TestBed.inject(Router);\n        let resolveFn;\n        const redirectTrackingPromise = new Promise((resolve) => {\n            resolveFn = resolve;\n        });\n        afterNextNavigation(TestBed.inject(Router), resolveFn);\n        await router.navigateByUrl(url);\n        await redirectTrackingPromise;\n        this.fixture.detectChanges();\n        const outlet = this.fixture.componentInstance.outlet;\n        // The outlet might not be activated if the user is testing a navigation for a guard that\n        // rejects\n        if (outlet && outlet.isActivated && outlet.activatedRoute.component) {\n            const activatedComponent = outlet.component;\n            if (requiredRoutedComponentType !== undefined &&\n                !(activatedComponent instanceof requiredRoutedComponentType)) {\n                throw new Error(`Unexpected routed component type. Expected ${requiredRoutedComponentType.name} but got ${activatedComponent.constructor.name}`);\n            }\n            return activatedComponent;\n        }\n        else {\n            if (requiredRoutedComponentType !== undefined) {\n                throw new Error(`Unexpected routed component type. Expected ${requiredRoutedComponentType.name} but the navigation did not activate any component.`);\n            }\n            return null;\n        }\n    }\n}\n\nexport { RouterTestingHarness, RouterTestingModule, RouterOutlet as ɵɵRouterOutlet };\n\n","// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { SignupComponent } from './signup';\n\n// fdescribe('Signup', () => {\n//   let component: SignupComponent;\n//   let fixture: ComponentFixture<SignupComponent>;\n\n//   beforeEach(async () => {\n//     await TestBed.configureTestingModule({\n//       imports: [SignupComponent]\n//     })\n//     .compileComponents();\n\n//     fixture = TestBed.createComponent(SignupComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { SignupComponent } from './signup';\n// import { HttpClientTestingModule } from '@angular/common/http/testing';\n// import { RouterTestingModule } from '@angular/router/testing';\n// import { FormsModule } from '@angular/forms';\n\n// fdescribe('SignupComponent', () => {\n//   let component: SignupComponent;\n//   let fixture: ComponentFixture<SignupComponent>;\n\n//   beforeEach(async () => {\n//     await TestBed.configureTestingModule({\n//       imports: [\n//         SignupComponent,          // ✅ Add standalone component to imports///standalone components must be imported here\n//         HttpClientTestingModule,  // ✅ Provide HttpClient mock\n//         RouterTestingModule,      // ✅ Provide Router mock\n//         FormsModule               // ✅ Required for ngModel binding\n//       ]\n//       // ❌ Do NOT put standalone components in declarations!\n//     }).compileComponents();\n\n//     fixture = TestBed.createComponent(SignupComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n\nimport { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { SignupComponent } from './signup';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Location } from '@angular/common';\nimport { Component } from '@angular/core';\n\n@Component({ template: '' })\nclass DummyComponent {}\n\nfdescribe('SignupComponent', () => {\n  let component: SignupComponent;\n  let fixture: ComponentFixture<SignupComponent>;\n  let httpMock: HttpTestingController;\n  let router: Router;\n  let location: Location;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [\n        SignupComponent,             // ✅ standalone component\n        HttpClientTestingModule,     // ✅ mock HttpClient\n        RouterTestingModule.withRoutes([\n          { path: '', component: DummyComponent },\n          { path: 'login', component: DummyComponent }\n        ]),\n        FormsModule                  // ✅ ngModel binding\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(SignupComponent);\n    component = fixture.componentInstance;\n    router = TestBed.inject(Router);\n    location = TestBed.inject(Location);\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    httpMock.verify(); // ensure no HTTP calls left open\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should navigate to \"/\" on handleClose()', fakeAsync(() => {\n    component.handleClose();\n    tick();\n    expect(location.path()).toBe('/');\n  }));\n\n  it('should navigate to /login when moveToLoginRoute is called', fakeAsync(() => {\n    const routerSpy = spyOn(router, 'navigate');\n    component.moveToLoginRoute();\n    tick();\n    expect(routerSpy).toHaveBeenCalledWith(['/login']);\n  }));\n\n  it('should send signup data and navigate to /login on success', fakeAsync(() => {\n    const routerSpy = spyOn(router, 'navigate');\n    spyOn(window, 'alert'); // to prevent real alert popup\n\n    component.signupData = {\n      fullName: 'Test User',\n      email: 'use@consultadd.com',\n      password: 'password123',\n      role: 'ADMIN',\n      department: 'HR'\n    };\n\n    component.registerUser();\n\n    const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/register');\n    expect(req.request.method).toBe('POST');\n    expect(req.request.body).toEqual(component.signupData);\n\n    req.flush({ message: 'Success' }); // simulate success\n    tick();\n\n    expect(window.alert).toHaveBeenCalledWith('Registered successfully!');\n    expect(routerSpy).toHaveBeenCalledWith(['/login']);\n  }));\n\n  it('should show alert on registration error', fakeAsync(() => {\n    spyOn(window, 'alert');\n\n    component.registerUser();\n\n    const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/register');\n    req.flush({ message: 'Error' }, { status: 400, statusText: 'Bad Request' });\n    tick();\n\n    expect(window.alert).toHaveBeenCalledWith('Registration failed. Please try again.');\n  }));\n});\n"],"mappings":"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","names":["init_testing","init_testing"],"x_google_ignoreList":[0]}