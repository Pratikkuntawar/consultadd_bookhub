{"version":3,"sources":["node_modules/ngx-cookie-service/fesm2022/ngx-cookie-service.mjs"],"sourcesContent":["import { isPlatformBrowser } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { DOCUMENT, PLATFORM_ID, Inject, Injectable } from '@angular/core';\n\nclass CookieService {\n    constructor(document, // Get the `PLATFORM_ID` so we can check if we're in a browser.\n    platformId) {\n        this.document = document;\n        this.platformId = platformId;\n        this.documentIsAccessible = isPlatformBrowser(this.platformId);\n    }\n    /**\n     * Get cookie Regular Expression\n     *\n     * @param name Cookie name\n     * @returns property RegExp\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    static getCookieRegExp(name) {\n        const escapedName = name.replace(/([[\\]{}()|=;+?,.*^$\\\\])/gi, '\\\\$1');\n        return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n    }\n    /**\n     * Gets the decoded version of an encoded component of a Uniform Resource Identifier (URI).\n     *\n     * @param encodedURIComponent A value representing an encoded URI component.\n     *\n     * @returns The decoded version of an encoded component of a Uniform Resource Identifier (URI).\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    static safeDecodeURIComponent(encodedURIComponent) {\n        try {\n            return decodeURIComponent(encodedURIComponent);\n        }\n        catch {\n            // probably it is not uri encoded. return as is\n            return encodedURIComponent;\n        }\n    }\n    /**\n     * Return `true` if {@link Document} is accessible, otherwise return `false`\n     *\n     * @param name Cookie name\n     * @returns boolean - whether cookie with specified name exists\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    check(name) {\n        if (!this.documentIsAccessible) {\n            return false;\n        }\n        name = encodeURIComponent(name);\n        const regExp = CookieService.getCookieRegExp(name);\n        return regExp.test(this.document.cookie);\n    }\n    /**\n     * Get cookies by name\n     *\n     * @param name Cookie name\n     * @returns property value\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    get(name) {\n        if (this.check(name)) {\n            name = encodeURIComponent(name);\n            const regExp = CookieService.getCookieRegExp(name);\n            const result = regExp.exec(this.document.cookie);\n            return result?.[1] ? CookieService.safeDecodeURIComponent(result[1]) : '';\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     * Get all cookies in JSON format\n     *\n     * @returns all the cookies in json\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    getAll() {\n        if (!this.documentIsAccessible) {\n            return {};\n        }\n        const cookies = {};\n        const document = this.document;\n        if (document.cookie && document.cookie !== '') {\n            document.cookie.split(';').forEach((currentCookie) => {\n                const [cookieName, cookieValue] = currentCookie.split('=');\n                cookies[CookieService.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = CookieService.safeDecodeURIComponent(cookieValue);\n            });\n        }\n        return cookies;\n    }\n    set(name, value, expiresOrOptions, path, domain, secure, sameSite, partitioned) {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\n            const optionsBody = {\n                expires: expiresOrOptions,\n                path,\n                domain,\n                secure,\n                sameSite: sameSite || 'Lax',\n                partitioned,\n            };\n            this.set(name, value, optionsBody);\n            return;\n        }\n        let cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n        const options = expiresOrOptions ? expiresOrOptions : {};\n        if (options.expires) {\n            if (typeof options.expires === 'number') {\n                const dateExpires = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\n                cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n            }\n            else {\n                cookieString += 'expires=' + options.expires.toUTCString() + ';';\n            }\n        }\n        if (options.path) {\n            cookieString += 'path=' + options.path + ';';\n        }\n        if (options.domain) {\n            cookieString += 'domain=' + options.domain + ';';\n        }\n        if (options.secure === false && options.sameSite === 'None') {\n            options.secure = true;\n            console.warn(`[ngx-cookie-service] Cookie ${name} was forced with secure flag because sameSite=None.` +\n                `More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`);\n        }\n        if (options.secure) {\n            cookieString += 'secure;';\n        }\n        if (!options.sameSite) {\n            options.sameSite = 'Lax';\n        }\n        cookieString += 'sameSite=' + options.sameSite + ';';\n        if (options.partitioned) {\n            cookieString += 'Partitioned;';\n        }\n        this.document.cookie = cookieString;\n    }\n    /**\n     * Delete cookie by name at given path and domain. If not path is not specified, cookie at '/' path will be deleted.\n     *\n     * @param name   Cookie name\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     * @param secure Cookie secure flag\n     * @param sameSite Cookie sameSite flag - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    delete(name, path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        const expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\n        this.set(name, '', { expires: expiresDate, path, domain, secure, sameSite });\n    }\n    /**\n     * Delete all cookies at given path and domain. If not path is not specified, all cookies at '/' path will be deleted.\n     *\n     * @param path   Cookie path\n     * @param domain Cookie domain\n     * @param secure Is the Cookie secure\n     * @param sameSite Is the cookie same site\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n    deleteAll(path, domain, secure, sameSite = 'Lax') {\n        if (!this.documentIsAccessible) {\n            return;\n        }\n        const cookies = this.getAll();\n        for (const cookieName in cookies) {\n            if (cookies.hasOwnProperty(cookieName)) {\n                this.delete(cookieName, path, domain, secure, sameSite);\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CookieService, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CookieService, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: CookieService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: () => [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }] });\n\n/*\n * Public API Surface of ngx-cookie-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CookieService };\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAIM;AAJN;AAAA;AAAA;AAAA;AACA;AACA;AAEA,IAAM,iBAAN,MAAM,eAAc;AAAA,MAChB,YAAY,UACZ,YAAY;AACR,aAAK,WAAW;AAChB,aAAK,aAAa;AAClB,aAAK,uBAAuB,kBAAkB,KAAK,UAAU;AAAA,MACjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,OAAO,gBAAgB,MAAM;AACzB,cAAM,cAAc,KAAK,QAAQ,6BAA6B,MAAM;AACpE,eAAO,IAAI,OAAO,SAAS,cAAc,WAAW,cAAc,kBAAkB,GAAG;AAAA,MAC3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWA,OAAO,uBAAuB,qBAAqB;AAC/C,YAAI;AACA,iBAAO,mBAAmB,mBAAmB;AAAA,QACjD,QACM;AAEF,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,MAAM,MAAM;AACR,YAAI,CAAC,KAAK,sBAAsB;AAC5B,iBAAO;AAAA,QACX;AACA,eAAO,mBAAmB,IAAI;AAC9B,cAAM,SAAS,eAAc,gBAAgB,IAAI;AACjD,eAAO,OAAO,KAAK,KAAK,SAAS,MAAM;AAAA,MAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,IAAI,MAAM;AACN,YAAI,KAAK,MAAM,IAAI,GAAG;AAClB,iBAAO,mBAAmB,IAAI;AAC9B,gBAAM,SAAS,eAAc,gBAAgB,IAAI;AACjD,gBAAM,SAAS,OAAO,KAAK,KAAK,SAAS,MAAM;AAC/C,iBAAO,SAAS,CAAC,IAAI,eAAc,uBAAuB,OAAO,CAAC,CAAC,IAAI;AAAA,QAC3E,OACK;AACD,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,SAAS;AACL,YAAI,CAAC,KAAK,sBAAsB;AAC5B,iBAAO,CAAC;AAAA,QACZ;AACA,cAAM,UAAU,CAAC;AACjB,cAAM,WAAW,KAAK;AACtB,YAAI,SAAS,UAAU,SAAS,WAAW,IAAI;AAC3C,mBAAS,OAAO,MAAM,GAAG,EAAE,QAAQ,CAAC,kBAAkB;AAClD,kBAAM,CAAC,YAAY,WAAW,IAAI,cAAc,MAAM,GAAG;AACzD,oBAAQ,eAAc,uBAAuB,WAAW,QAAQ,MAAM,EAAE,CAAC,CAAC,IAAI,eAAc,uBAAuB,WAAW;AAAA,UAClI,CAAC;AAAA,QACL;AACA,eAAO;AAAA,MACX;AAAA,MACA,IAAI,MAAM,OAAO,kBAAkB,MAAM,QAAQ,QAAQ,UAAU,aAAa;AAC5E,YAAI,CAAC,KAAK,sBAAsB;AAC5B;AAAA,QACJ;AACA,YAAI,OAAO,qBAAqB,YAAY,4BAA4B,QAAQ,QAAQ,UAAU,UAAU,UAAU;AAClH,gBAAM,cAAc;AAAA,YAChB,SAAS;AAAA,YACT;AAAA,YACA;AAAA,YACA;AAAA,YACA,UAAU,YAAY;AAAA,YACtB;AAAA,UACJ;AACA,eAAK,IAAI,MAAM,OAAO,WAAW;AACjC;AAAA,QACJ;AACA,YAAI,eAAe,mBAAmB,IAAI,IAAI,MAAM,mBAAmB,KAAK,IAAI;AAChF,cAAM,UAAU,mBAAmB,mBAAmB,CAAC;AACvD,YAAI,QAAQ,SAAS;AACjB,cAAI,OAAO,QAAQ,YAAY,UAAU;AACrC,kBAAM,cAAc,IAAI,MAAK,oBAAI,KAAK,GAAE,QAAQ,IAAI,QAAQ,UAAU,MAAO,KAAK,KAAK,EAAE;AACzF,4BAAgB,aAAa,YAAY,YAAY,IAAI;AAAA,UAC7D,OACK;AACD,4BAAgB,aAAa,QAAQ,QAAQ,YAAY,IAAI;AAAA,UACjE;AAAA,QACJ;AACA,YAAI,QAAQ,MAAM;AACd,0BAAgB,UAAU,QAAQ,OAAO;AAAA,QAC7C;AACA,YAAI,QAAQ,QAAQ;AAChB,0BAAgB,YAAY,QAAQ,SAAS;AAAA,QACjD;AACA,YAAI,QAAQ,WAAW,SAAS,QAAQ,aAAa,QAAQ;AACzD,kBAAQ,SAAS;AACjB,kBAAQ,KAAK,+BAA+B,IAAI,wJACyD;AAAA,QAC7G;AACA,YAAI,QAAQ,QAAQ;AAChB,0BAAgB;AAAA,QACpB;AACA,YAAI,CAAC,QAAQ,UAAU;AACnB,kBAAQ,WAAW;AAAA,QACvB;AACA,wBAAgB,cAAc,QAAQ,WAAW;AACjD,YAAI,QAAQ,aAAa;AACrB,0BAAgB;AAAA,QACpB;AACA,aAAK,SAAS,SAAS;AAAA,MAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAaA,OAAO,MAAM,MAAM,QAAQ,QAAQ,WAAW,OAAO;AACjD,YAAI,CAAC,KAAK,sBAAsB;AAC5B;AAAA,QACJ;AACA,cAAM,cAAc,oBAAI,KAAK,+BAA+B;AAC5D,aAAK,IAAI,MAAM,IAAI,EAAE,SAAS,aAAa,MAAM,QAAQ,QAAQ,SAAS,CAAC;AAAA,MAC/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYA,UAAU,MAAM,QAAQ,QAAQ,WAAW,OAAO;AAC9C,YAAI,CAAC,KAAK,sBAAsB;AAC5B;AAAA,QACJ;AACA,cAAM,UAAU,KAAK,OAAO;AAC5B,mBAAW,cAAc,SAAS;AAC9B,cAAI,QAAQ,eAAe,UAAU,GAAG;AACpC,iBAAK,OAAO,YAAY,MAAM,QAAQ,QAAQ,QAAQ;AAAA,UAC1D;AAAA,QACJ;AAAA,MACJ;AAAA,IAGJ;AAFa,mBAAK,YAAU,6BAAmB,EAAE,YAAY,UAAU,SAAS,UAAU,UAAU,cAAI,MAAM,gBAAe,MAAM,CAAC,EAAE,OAAO,SAAS,GAAG,EAAE,OAAO,YAAY,CAAC,GAAG,QAAW,cAAgB,WAAW,CAAC;AAC5M,mBAAK,aAAW,gCAAsB,EAAE,YAAY,UAAU,SAAS,UAAU,UAAU,cAAI,MAAM,gBAAe,YAAY,OAAO,CAAC;AA9LrJ,IAAM,gBAAN;AAgMA,IAAG,mCAAyB,EAAE,YAAY,UAAU,SAAS,UAAU,UAAU,cAAI,MAAM,eAAe,YAAY,CAAC;AAAA,MAC3G,MAAM;AAAA,MACN,MAAM,CAAC;AAAA,QACC,YAAY;AAAA,MAChB,CAAC;AAAA,IACT,CAAC,GAAG,gBAAgB,MAAM,CAAC,EAAE,MAAM,UAAU,YAAY,CAAC;AAAA,MAC9C,MAAM;AAAA,MACN,MAAM,CAAC,QAAQ;AAAA,IACnB,CAAC,EAAE,GAAG,EAAE,MAAM,QAAW,YAAY,CAAC;AAAA,MAClC,MAAM;AAAA,MACN,MAAM,CAAC,WAAW;AAAA,IACtB,CAAC,EAAE,CAAC,EAAE,CAAC;AAAA;AAAA;","names":[],"x_google_ignoreList":[0]}