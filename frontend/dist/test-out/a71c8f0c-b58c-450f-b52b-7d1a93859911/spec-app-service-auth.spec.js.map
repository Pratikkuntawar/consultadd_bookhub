{
  "version": 3,
  "sources": ["src/app/service/auth.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\nimport { Auth } from './auth'; // update the path as needed\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { EmployeeModel } from '../models/Employee';\n\ndescribe('Auth Service', () => {\n  let service: Auth;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [Auth]\n    });\n\n    service = TestBed.inject(Auth);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify(); // ensures no outstanding requests\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should call login API with POST method', () => {\n    const loginData = { email: 'test@example.com', password: 'password123' };\n\n    service.login(loginData).subscribe(response => {\n      expect(response).toBeTruthy();\n    });\n\n    const req = httpMock.expectOne(\"http://localhost:8080/auth/employeeLogin\");\n    expect(req.request.method).toBe('POST');\n    expect(req.request.body).toEqual(loginData);\n    req.flush({ success: true }); // mock response\n  });\n\n  it('should call register API with POST method', () => {\n    const employeeData: any = {\n      id: 1,\n      name: 'John Doe',\n      email: 'john@example.com',\n      password: 'secure123'\n    };\n\n    service.register(employeeData).subscribe(response => {\n      expect(response).toBeTruthy();\n    });\n\n    const req = httpMock.expectOne(\"http://localhost:8080/auth/register\");\n    expect(req.request.method).toBe('POST');\n    expect(req.request.body).toEqual(employeeData);\n    req.flush({ success: true }); // mock response\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AACA;AACAA;AAGA,SAAS,gBAAgB,MAAK;AAC5B,MAAI;AACJ,MAAI;AAEJ,aAAW,MAAK;AACd,YAAQ,uBAAuB;MAC7B,SAAS,CAAC,uBAAuB;MACjC,WAAW,CAAC,IAAI;KACjB;AAED,cAAU,QAAQ,OAAO,IAAI;AAC7B,eAAW,QAAQ,OAAO,qBAAqB;EACjD,CAAC;AAED,YAAU,MAAK;AACb,aAAS,OAAM;EACjB,CAAC;AAED,KAAG,qBAAqB,MAAK;AAC3B,WAAO,OAAO,EAAE,WAAU;EAC5B,CAAC;AAED,KAAG,0CAA0C,MAAK;AAChD,UAAM,YAAY,EAAE,OAAO,oBAAoB,UAAU,cAAa;AAEtE,YAAQ,MAAM,SAAS,EAAE,UAAU,cAAW;AAC5C,aAAO,QAAQ,EAAE,WAAU;IAC7B,CAAC;AAED,UAAM,MAAM,SAAS,UAAU,0CAA0C;AACzE,WAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,MAAM;AACtC,WAAO,IAAI,QAAQ,IAAI,EAAE,QAAQ,SAAS;AAC1C,QAAI,MAAM,EAAE,SAAS,KAAI,CAAE;EAC7B,CAAC;AAED,KAAG,6CAA6C,MAAK;AACnD,UAAM,eAAoB;MACxB,IAAI;MACJ,MAAM;MACN,OAAO;MACP,UAAU;;AAGZ,YAAQ,SAAS,YAAY,EAAE,UAAU,cAAW;AAClD,aAAO,QAAQ,EAAE,WAAU;IAC7B,CAAC;AAED,UAAM,MAAM,SAAS,UAAU,qCAAqC;AACpE,WAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,MAAM;AACtC,WAAO,IAAI,QAAQ,IAAI,EAAE,QAAQ,YAAY;AAC7C,QAAI,MAAM,EAAE,SAAS,KAAI,CAAE;EAC7B,CAAC;AACH,CAAC;",
  "names": ["init_testing"]
}
