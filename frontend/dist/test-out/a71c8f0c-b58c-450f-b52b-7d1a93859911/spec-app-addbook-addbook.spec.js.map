{
  "version": 3,
  "sources": ["angular:jit:template:src/app/addbook/addbook.html", "angular:jit:style:src/app/addbook/addbook.css", "src/app/addbook/addbook.ts", "src/app/addbook/addbook.spec.ts"],
  "sourcesContent": ["<!-- <div class=\"container mt-4\">\n  <h2 class=\"mb-3\">Add New Book</h2>\n  <form [formGroup]=\"bookForm\" (ngSubmit)=\"onSubmit()\">\n\n    <div class=\"form-group mb-2\">\n      <label>Title</label>\n      <input formControlName=\"title\" class=\"form-control\" required>\n    </div>\n\n    <div class=\"form-group mb-2\">\n      <label>Author</label>\n      <input formControlName=\"author\" class=\"form-control\" required>\n    </div>\n\n    <div class=\"form-group mb-2\">\n      <label>Description</label>\n      <textarea formControlName=\"description\" class=\"form-control\" rows=\"3\"></textarea>\n    </div>\n\n    <div class=\"form-group mb-2\">\n      <label>Book Type</label>\n      <select formControlName=\"bookType\" class=\"form-control\" required>\n        <option value=\"\">Select Type</option>\n        <option value=\"DIGITAL\">DIGITAL</option>\n        <option value=\"PHYSICAL\">PHYSICAL</option>\n      </select>\n    </div>\n\n    <div class=\"form-group mb-2\">\n      <label>Department</label>\n      <select formControlName=\"department\" class=\"form-control\" required>\n        <option value=\"\">Select Department</option>\n        <option value=\"CODING\">CODING</option>\n        <option value=\"HR\">HR</option>\n        <option value=\"SALES\">SALES</option>\n        <option value=\"DELIVERY\">DELIVERY</option>\n        <option value=\"MARKETING\">MARKETING</option>\n      </select>\n    </div>\n\n    <div class=\"form-group mb-2\">\n      <label>PDF URL</label>\n      <input formControlName=\"pdfUrl\" class=\"form-control\">\n    </div>\n\n    <div class=\"form-group mb-2\">\n      <label>Image URL</label>\n      <input formControlName=\"imageUrl\" class=\"form-control\">\n    </div>\n\n    <div class=\"form-group mb-3\">\n      <label>Price</label>\n      <input type=\"number\" formControlName=\"price\" class=\"form-control\" required>\n    </div>\n\n    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"bookForm.invalid\">Submit</button>\n  </form>\n</div> -->\n<!-- <div class=\"form-container\">\n  <h2>Add New Book</h2>\n  <form [formGroup]=\"bookForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\">\n      <label>Title</label>\n      <input formControlName=\"title\" required />\n    </div>\n\n    <div class=\"form-group\">\n      <label>Author</label>\n      <input formControlName=\"author\" required />\n    </div>\n\n    <div class=\"form-group\">\n      <label>Description</label>\n      <textarea formControlName=\"description\" rows=\"3\"></textarea>\n    </div>\n\n    <div class=\"form-group\">\n      <label>Book Type</label>\n      <select formControlName=\"bookType\" required>\n        <option value=\"\">Select Type</option>\n        <option value=\"DIGITAL\">DIGITAL</option>\n        <option value=\"PHYSICAL\">PHYSICAL</option>\n      </select>\n    </div>\n\n    <div class=\"form-group\">\n      <label>Department</label>\n      <select formControlName=\"department\" required>\n        <option value=\"\">Select Department</option>\n        <option value=\"CODING\">CODING</option>\n        <option value=\"HR\">HR</option>\n        <option value=\"SALES\">SALES</option>\n        <option value=\"DELIVERY\">DELIVERY</option>\n        <option value=\"MARKETING\">MARKETING</option>\n      </select>\n    </div>\n\n    <div class=\"form-group\">\n      <label>PDF URL</label>\n      <input formControlName=\"pdfUrl\" />\n    </div>\n\n    <div class=\"form-group\">\n      <label>Image URL</label>\n      <input formControlName=\"imageUrl\" />\n    </div>\n\n    <div class=\"form-group\">\n      <label>Price</label>\n      <input type=\"number\" formControlName=\"price\" required />\n    </div>\n\n    <button type=\"submit\" [disabled]=\"bookForm.invalid\">Submit</button>\n  </form>\n</div> -->\n\n\n\n<!-- \n<div class=\"page-container\">\n  <div class=\"form-container\">\n    <h2 class=\"form-title\">Add New Book</h2>\n    <form [formGroup]=\"bookForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"form-group\">\n        <label>Title</label>\n        <input formControlName=\"title\" required>\n      </div>\n\n      <div class=\"form-group\">\n        <label>Author</label>\n        <input formControlName=\"author\" required>\n      </div>\n\n      <div class=\"form-group\">\n        <label>Description</label>\n        <textarea formControlName=\"description\" rows=\"3\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label>Book Type</label>\n        <select formControlName=\"bookType\" required>\n          <option value=\"\">Select Type</option>\n          <option value=\"DIGITAL\">DIGITAL</option>\n          <option value=\"PHYSICAL\">PHYSICAL</option>\n        </select>\n      </div>\n\n      <div class=\"form-group\">\n        <label>Department</label>\n        <select formControlName=\"department\" required>\n          <option value=\"\">Select Department</option>\n          <option value=\"CODING\">CODING</option>\n          <option value=\"HR\">HR</option>\n          <option value=\"SALES\">SALES</option>\n          <option value=\"DELIVERY\">DELIVERY</option>\n          <option value=\"MARKETING\">MARKETING</option>\n        </select>\n      </div>\n\n      <div class=\"form-group\">\n        <label>PDF URL</label>\n        <input formControlName=\"pdfUrl\">\n      </div>\n\n      <div class=\"form-group\">\n        <label>Image URL</label>\n        <input formControlName=\"imageUrl\">\n      </div>\n\n      <div class=\"form-group\">\n        <label>Price</label>\n        <input type=\"number\" formControlName=\"price\" required>\n      </div>\n\n      <button type=\"submit\" [disabled]=\"bookForm.invalid\">Submit</button>\n    </form>\n  </div>\n</div>\n -->\n<div class=\"modal-backdrop bg-dark show\">\n  <div class=\"modal d-block\" tabindex=\"-1\">\n    <div class=\"modal-dialog modal-dialog-centered\">\n      <div class=\"modal-content custom-login-modal text-center p-4\">\n        <h5 class=\"modal-title text-white mb-3\">Add New Book</h5>\n        <form [formGroup]=\"bookForm\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"form-group mb-3\">\n            <input class=\"form-control dark-input\" formControlName=\"title\" placeholder=\"Title\" required />\n          </div>\n\n          <div class=\"form-group mb-3\">\n            <input class=\"form-control dark-input\" formControlName=\"author\" placeholder=\"Author\" required />\n          </div>\n\n          <div class=\"form-group mb-3\">\n            <textarea class=\"form-control dark-input\" formControlName=\"description\" placeholder=\"Description\" rows=\"3\"></textarea>\n          </div>\n\n          <div class=\"form-group mb-3\">\n            <select class=\"form-control dark-input\" formControlName=\"bookType\" required>\n              <option value=\"\">Select Type</option>\n              <option value=\"DIGITAL\">DIGITAL</option>\n              <option value=\"PHYSICAL\">PHYSICAL</option>\n            </select>\n          </div>\n\n          <div class=\"form-group mb-3\">\n            <select class=\"form-control dark-input\" formControlName=\"department\" required>\n              <option value=\"\">Select Department</option>\n              <option value=\"CODING\">CODING</option>\n              <option value=\"HR\">HR</option>\n              <option value=\"SALES\">SALES</option>\n              <option value=\"DELIVERY\">DELIVERY</option>\n              <option value=\"MARKETING\">MARKETING</option>\n            </select>\n          </div>\n\n          <div class=\"form-group mb-3\">\n            <input class=\"form-control dark-input\" formControlName=\"pdfUrl\" placeholder=\"PDF URL\" />\n          </div>\n\n          <div class=\"form-group mb-3\">\n            <input class=\"form-control dark-input\" formControlName=\"imageUrl\" placeholder=\"Image URL\" />\n          </div>\n\n          <div class=\"form-group mb-3\">\n            <input type=\"number\" class=\"form-control dark-input\" formControlName=\"price\" placeholder=\"Price\" required />\n          </div>\n\n          <div class=\"buttons\">\n            <button type=\"submit\" class=\"btn btn-primary fw-bold me-2\" [disabled]=\"bookForm.invalid\">Submit</button>\n          <button type=\"button\" class=\"btn btn-danger fw-bold\" (click)=\"handleClose()\">Close</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n", "/* src/app/addbook/addbook.css */\n.page-container {\n  background-color: #000000;\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 40px 20px;\n}\n.form-container {\n  background-color: #ffffff;\n  padding: 30px;\n  border-radius: 10px;\n  width: 100%;\n  max-width: 500px;\n  box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);\n}\n.form-title {\n  text-align: center;\n  margin-bottom: 25px;\n  color: #333;\n}\n.form-group {\n  margin-bottom: 15px;\n  display: flex;\n  flex-direction: column;\n}\n.form-group input,\n.form-group select,\n.form-group textarea {\n  padding: 10px;\n  font-size: 15px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  outline: none;\n  transition: border 0.3s ease;\n}\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n  border-color: #000000;\n}\nbutton[type=submit] {\n  background-color: #000000;\n  color: white;\n  padding: 10px 15px;\n  font-size: 16px;\n  border: none;\n  border-radius: 7px;\n  cursor: pointer;\n  width: 100%;\n  transition: background-color 0.3s ease;\n}\nbutton[type=submit]:hover {\n  background-color: #333333;\n}\n.page-container {\n  background-color: #000000;\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 40px 20px;\n  position: relative;\n  overflow: hidden;\n}\n.page-container::before {\n  content: \"\";\n  position: absolute;\n  inset: 0;\n  background-size: cover;\n  background-position: center;\n  filter: blur(8px);\n  opacity: 0.4;\n  z-index: 1;\n}\n.form-container {\n  position: relative;\n  z-index: 2;\n  width: 100%;\n  max-width: 500px;\n  background-color: rgba(255, 255, 255, 0.95);\n  padding: 30px;\n  border-radius: 12px;\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);\n  -webkit-backdrop-filter: blur(10px);\n  backdrop-filter: blur(10px);\n}\nform label {\n  font-weight: 600;\n  display: block;\n  margin-bottom: 5px;\n  color: #333;\n}\nform input,\nform select,\nform textarea {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 15px;\n  border: 1px solid #ccc;\n  border-radius: 6px;\n  font-size: 16px;\n}\nbutton {\n  background-color: #007bff;\n  color: #fff;\n  padding: 10px 18px;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 16px;\n}\nbutton:disabled {\n  background-color: #aaa;\n  cursor: not-allowed;\n}\n.modal-backdrop.show {\n  background-color: rgba(0, 0, 0, 0.85);\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 1050;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.custom-login-modal {\n  background-color: #1e1e1e;\n  border-radius: 12px;\n  color: #ffffff;\n  box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);\n}\n.dark-input {\n  background-color: #2d2d2d;\n  border: 1px solid #444;\n  color: #fff;\n}\n.buttons {\n  display: flex;\n}\noption {\n  text-align: left;\n  color: #007bff;\n}\ninput::placeholder {\n  text-align: left;\n  color: #007bff;\n}\n.modal-backdrop.show {\n  background-color: rgba(0, 0, 0, 0.85);\n  z-index: 1040;\n}\n.modal.d-block {\n  background-color: rgba(0, 0, 0, 0.6);\n  z-index: 1050;\n}\n.custom-login-modal {\n  background-color: #1f1f1f;\n  border-radius: 15px;\n  box-shadow: 0 0 15px rgba(255, 255, 255, 0.1);\n  color: #ffffff;\n  width: 100%;\n  max-width: 500px;\n}\n.custom-login-modal .modal-title {\n  font-size: 24px;\n  font-weight: bold;\n  color: #f8f8f8;\n}\n.dark-input {\n  background-color: #2c2c2c;\n  color: #ffffff;\n  border: 1px solid #444;\n  border-radius: 6px;\n}\n.dark-input::placeholder {\n  color: #cccccc;\n}\n.dark-input:focus {\n  background-color: #2c2c2c;\n  color: #ffffff;\n  border-color: #007bff;\n  box-shadow: none;\n}\n.buttons {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n}\n.btn-primary {\n  background-color: #007bff;\n  border: none;\n}\n.btn-danger {\n  background-color: #dc3545;\n  border: none;\n}\n/*# sourceMappingURL=addbook.css.map */\n", "// import { Component } from '@angular/core';\n\n// @Component({\n//   selector: 'app-addbook',\n//   imports: [],\n//   templateUrl: './addbook.html',\n//   styleUrl: './addbook.css'\n// })\n// export class Addbook {\n\n// }\n// import { Component, OnInit } from '@angular/core';\n// import { FormBuilder, FormGroup, FormsModule, Validators } from '@angular/forms';\n// import { BookType, Departments, BookCreateRequestDto } from '../models/book-create-request.dto';\n// import { BookService } from '../services/book.service';\n// import { CommonModule } from '@angular/common';\n\n// @Component({\n//   selector: 'app-addbook',\n//   imports: [FormsModule,CommonModule],\n//   templateUrl: './addbook.html',\n//   styleUrl: './addbook.css'\n// })\n// export class AddBook implements OnInit {\n//   bookForm!: FormGroup;\n//   bookTypes = Object.values(BookType);\n//   departments = Object.values(Departments);\n\n//   constructor(private fb: FormBuilder, private bookService: BookService) {}\n\n//   ngOnInit(): void {\n//     this.bookForm = this.fb.group({\n//       title: ['', Validators.required],\n//       author: ['', Validators.required],\n//       description: [''],\n//       bookType: ['', Validators.required],\n//       department: ['', Validators.required],\n//       pdfUrl: [''],\n//       imageUrl: [''],\n//       price: [null, [Validators.required, Validators.min(0)]]\n//     });\n//   }\n\n//   onSubmit(): void {\n//     if (this.bookForm.valid) {\n//       const bookData: BookCreateRequestDto = this.bookForm.value;\n\n//       this.bookService.addBook(bookData).subscribe({\n//         next: (res) => {\n//           console.log('Response:', res);\n//           alert('Book added successfully!');\n//           this.bookForm.reset();\n//         },\n//         error: (err) => {\n//           console.error('Error occurred while adding book:', err);\n//           alert('Failed to add book. Please try again.');\n//         }\n//       });\n//     } else {\n//       alert('Please fill in all required fields.');\n//     }\n//   }\n// }\n\n\n\n\n\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-addbook',\n  imports: [FormsModule,CommonModule,ReactiveFormsModule],\n  templateUrl: './addbook.html',\n  styleUrl: './addbook.css'\n})\nexport class AddBook implements OnInit {\n  bookForm!: FormGroup;\n\n  constructor(private fb: FormBuilder, private http: HttpClient, private router: Router) {}\n\n  ngOnInit(): void {\n    this.bookForm = this.fb.group({\n      title: ['', Validators.required],\n      author: ['', Validators.required],\n      description: [''],\n      bookType: ['', Validators.required],\n      department: ['', Validators.required],\n      pdfUrl: [''],\n      imageUrl: [''],\n      price: ['', Validators.required]\n    });\n  }\n\n  onSubmit(): void {\n    if (this.bookForm.invalid) {\n      return;\n    }\n\n    const bookData = this.bookForm.value;\n\n    // Example: Get token from localStorage or any service\n    const token = localStorage.getItem('token'); // Or however you store it\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n\n    this.http.post<any>(\n      'http://localhost:8080/consultadd/books/addbook',\n      bookData,\n      { headers }\n    ).subscribe({\n      next: (res) => {\n        alert('✅ Book added successfully!');\n        console.log('Book added successfully:', res);\n        //this.router.navigate(['/seller-dashboard']); \n        this.bookForm.reset();\n      },\n      error: (err) => {\n        alert('❌ Failed to add book. Please try again.');\n        console.error('Error while adding book:', err);\n      }\n    });\n  }\n  handleClose(){\n   this.router.navigate(['/seller-dashboard']); \n  }\n}\n", "// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { AddBook } from './addbook';\n\n// describe('Addbook', () => {\n//   let component: AddBook;\n//   let fixture: ComponentFixture<AddBook>;\n\n//   beforeEach(async () => {\n//     await TestBed.configureTestingModule({\n//       imports: [AddBook]\n//     })\n//     .compileComponents();\n\n//     fixture = TestBed.createComponent(AddBook);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n\nimport { ComponentFixture, TestBed, fakeAsync, tick, flush } from '@angular/core/testing';\nimport { AddBook } from './addbook';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\nimport { of, throwError } from 'rxjs';\n\nfdescribe('AddBook Component', () => {\n  let component: AddBook;\n  let fixture: ComponentFixture<AddBook>;\n  let httpMock: HttpTestingController;\n  let routerSpy: jasmine.SpyObj<Router>;\n\n  beforeEach(async () => {\n    routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n\n    await TestBed.configureTestingModule({\n      imports: [\n        AddBook,\n        ReactiveFormsModule,\n        FormsModule,\n        HttpClientTestingModule\n      ],\n      providers: [\n        { provide: Router, useValue: routerSpy }\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(AddBook);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should have form controls initialized', () => {\n    const form = component.bookForm;\n    expect(form).toBeTruthy();\n    expect(form.controls['title']).toBeDefined();\n    expect(form.controls['author']).toBeDefined();\n  });\n\n  it('should show error when submitting invalid form', () => {\n    spyOn(window, 'alert');\n    component.bookForm.patchValue({ title: '', author: '' }); // invalid input\n    component.onSubmit();\n    expect(window.alert).not.toHaveBeenCalledWith('✅ Book added successfully!');\n  });\n\n  it('should send POST request on valid form submit', fakeAsync(() => {\n    spyOn(window, 'alert');\n    const mockResponse = { message: 'Book added' };\n    const bookData = {\n      title: 'Test Book',\n      author: 'John Doe',\n      description: '',\n      bookType: 'NOVEL',\n      department: 'LITERATURE',\n      pdfUrl: '',\n      imageUrl: '',\n      price: 100\n    };\n\n    component.bookForm.setValue(bookData);\n    localStorage.setItem('token', 'mock-token');\n\n    const http = TestBed.inject(HttpTestingController);\n    component.onSubmit();\n\n    const req = http.expectOne('http://localhost:8080/consultadd/books/addbook');\n    expect(req.request.method).toBe('POST');\n    expect(req.request.headers.get('Authorization')).toBe('Bearer mock-token');\n    req.flush(mockResponse);\n\n    tick();\n    expect(window.alert).toHaveBeenCalledWith('✅ Book added successfully!');\n    http.verify();\n    flush();\n  }));\n\n  it('should alert on HTTP error', fakeAsync(() => {\n    spyOn(window, 'alert');\n    const bookData = {\n      title: 'Test Book',\n      author: 'John Doe',\n      description: '',\n      bookType: 'NOVEL',\n      department: 'LITERATURE',\n      pdfUrl: '',\n      imageUrl: '',\n      price: 100\n    };\n\n    component.bookForm.setValue(bookData);\n    localStorage.setItem('token', 'mock-token');\n\n    const http = TestBed.inject(HttpTestingController);\n    component.onSubmit();\n\n    const req = http.expectOne('http://localhost:8080/consultadd/books/addbook');\n    req.flush({ message: 'Error' }, { status: 500, statusText: 'Server Error' });\n\n    tick();\n    expect(window.alert).toHaveBeenCalledWith('❌ Failed to add book. Please try again.');\n    http.verify();\n    flush();\n  }));\n\n  it('should navigate to seller dashboard on handleClose()', () => {\n    component.handleClose();\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/seller-dashboard']);\n  });\n});\n"],
  "mappings": "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",
  "names": ["addbook_default", "init_addbook", "init_addbook", "AddBook", "init_addbook", "init_testing"]
}
