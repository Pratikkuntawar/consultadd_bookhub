{
  "version": 3,
  "sources": ["src/app/signup/signup.spec.ts"],
  "sourcesContent": ["// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { SignupComponent } from './signup';\n\n// fdescribe('Signup', () => {\n//   let component: SignupComponent;\n//   let fixture: ComponentFixture<SignupComponent>;\n\n//   beforeEach(async () => {\n//     await TestBed.configureTestingModule({\n//       imports: [SignupComponent]\n//     })\n//     .compileComponents();\n\n//     fixture = TestBed.createComponent(SignupComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { SignupComponent } from './signup';\n// import { HttpClientTestingModule } from '@angular/common/http/testing';\n// import { RouterTestingModule } from '@angular/router/testing';\n// import { FormsModule } from '@angular/forms';\n\n// fdescribe('SignupComponent', () => {\n//   let component: SignupComponent;\n//   let fixture: ComponentFixture<SignupComponent>;\n\n//   beforeEach(async () => {\n//     await TestBed.configureTestingModule({\n//       imports: [\n//         SignupComponent,          // ✅ Add standalone component to imports///standalone components must be imported here\n//         HttpClientTestingModule,  // ✅ Provide HttpClient mock\n//         RouterTestingModule,      // ✅ Provide Router mock\n//         FormsModule               // ✅ Required for ngModel binding\n//       ]\n//       // ❌ Do NOT put standalone components in declarations!\n//     }).compileComponents();\n\n//     fixture = TestBed.createComponent(SignupComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n\nimport { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { SignupComponent } from './signup';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Location } from '@angular/common';\nimport { Component } from '@angular/core';\n\n@Component({ template: '' })\nclass DummyComponent {}\n\nfdescribe('SignupComponent', () => {\n  let component: SignupComponent;\n  let fixture: ComponentFixture<SignupComponent>;\n  let httpMock: HttpTestingController;\n  let router: Router;\n  let location: Location;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [\n        SignupComponent,             // ✅ standalone component\n        HttpClientTestingModule,     // ✅ mock HttpClient\n        RouterTestingModule.withRoutes([\n          { path: '', component: DummyComponent },\n          { path: 'login', component: DummyComponent }\n        ]),\n        FormsModule                  // ✅ ngModel binding\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(SignupComponent);\n    component = fixture.componentInstance;\n    router = TestBed.inject(Router);\n    location = TestBed.inject(Location);\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    httpMock.verify(); // ensure no HTTP calls left open\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should navigate to \"/\" on handleClose()', fakeAsync(() => {\n    component.handleClose();\n    tick();\n    expect(location.path()).toBe('/');\n  }));\n\n  it('should navigate to /login when moveToLoginRoute is called', fakeAsync(() => {\n    const routerSpy = spyOn(router, 'navigate');\n    component.moveToLoginRoute();\n    tick();\n    expect(routerSpy).toHaveBeenCalledWith(['/login']);\n  }));\n\n  it('should send signup data and navigate to /login on success', fakeAsync(() => {\n    const routerSpy = spyOn(router, 'navigate');\n    spyOn(window, 'alert'); // to prevent real alert popup\n\n    component.signupData = {\n      fullName: 'Test User',\n      email: 'use@consultadd.com',\n      password: 'password123',\n      role: 'ADMIN',\n      department: 'HR'\n    };\n\n    component.registerUser();\n\n    const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/register');\n    expect(req.request.method).toBe('POST');\n    expect(req.request.body).toEqual(component.signupData);\n\n    req.flush({ message: 'Success' }); // simulate success\n    tick();\n\n    expect(window.alert).toHaveBeenCalledWith('Registered successfully!');\n    expect(routerSpy).toHaveBeenCalledWith(['/login']);\n  }));\n\n  it('should show alert on registration error', fakeAsync(() => {\n    spyOn(window, 'alert');\n\n    component.registerUser();\n\n    const req = httpMock.expectOne('http://localhost:8080/consultadd/auth/register');\n    req.flush({ message: 'Error' }, { status: 400, statusText: 'Bad Request' });\n    tick();\n\n    expect(window.alert).toHaveBeenCalledWith('Registration failed. Please try again.');\n  }));\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAsDA;AACA;AACA,IAAAA;AACA;AACA,IAAAA;AACA;AACA;AACA;AAGA,QAAM,iBAAN,MAAM,eAAc;;AAAd,qBAAc,WAAA;MADnB,UAAU,EAAE,UAAU,GAAE,CAAE;OACrB,cAAc;AAEpB,cAAU,mBAAmB,MAAK;AAChC,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS;YACP;;YACA;;YACA,oBAAoB,WAAW;cAC7B,EAAE,MAAM,IAAI,WAAW,eAAc;cACrC,EAAE,MAAM,SAAS,WAAW,eAAc;aAC3C;YACD;;;SAEH,EAAE,kBAAiB;AAEpB,kBAAU,QAAQ,gBAAgB,eAAe;AACjD,oBAAY,QAAQ;AACpB,iBAAS,QAAQ,OAAO,MAAM;AAC9B,mBAAW,QAAQ,OAAO,QAAQ;AAClC,mBAAW,QAAQ,OAAO,qBAAqB;AAC/C,gBAAQ,cAAa;MACvB,EAAC;AAED,gBAAU,MAAK;AACb,iBAAS,OAAM;MACjB,CAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;AAED,SAAG,2CAA2C,UAAU,MAAK;AAC3D,kBAAU,YAAW;AACrB,aAAI;AACJ,eAAO,SAAS,KAAI,CAAE,EAAE,KAAK,GAAG;MAClC,CAAC,CAAC;AAEF,SAAG,6DAA6D,UAAU,MAAK;AAC7E,cAAM,YAAY,MAAM,QAAQ,UAAU;AAC1C,kBAAU,iBAAgB;AAC1B,aAAI;AACJ,eAAO,SAAS,EAAE,qBAAqB,CAAC,QAAQ,CAAC;MACnD,CAAC,CAAC;AAEF,SAAG,6DAA6D,UAAU,MAAK;AAC7E,cAAM,YAAY,MAAM,QAAQ,UAAU;AAC1C,cAAM,QAAQ,OAAO;AAErB,kBAAU,aAAa;UACrB,UAAU;UACV,OAAO;UACP,UAAU;UACV,MAAM;UACN,YAAY;;AAGd,kBAAU,aAAY;AAEtB,cAAM,MAAM,SAAS,UAAU,gDAAgD;AAC/E,eAAO,IAAI,QAAQ,MAAM,EAAE,KAAK,MAAM;AACtC,eAAO,IAAI,QAAQ,IAAI,EAAE,QAAQ,UAAU,UAAU;AAErD,YAAI,MAAM,EAAE,SAAS,UAAS,CAAE;AAChC,aAAI;AAEJ,eAAO,OAAO,KAAK,EAAE,qBAAqB,0BAA0B;AACpE,eAAO,SAAS,EAAE,qBAAqB,CAAC,QAAQ,CAAC;MACnD,CAAC,CAAC;AAEF,SAAG,2CAA2C,UAAU,MAAK;AAC3D,cAAM,QAAQ,OAAO;AAErB,kBAAU,aAAY;AAEtB,cAAM,MAAM,SAAS,UAAU,gDAAgD;AAC/E,YAAI,MAAM,EAAE,SAAS,QAAO,GAAI,EAAE,QAAQ,KAAK,YAAY,cAAa,CAAE;AAC1E,aAAI;AAEJ,eAAO,OAAO,KAAK,EAAE,qBAAqB,wCAAwC;MACpF,CAAC,CAAC;IACJ,CAAC;;;",
  "names": ["init_testing"]
}
